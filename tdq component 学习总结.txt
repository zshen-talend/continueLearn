1.component主文件(xml)
	这个文件要在ComponentFileChecker中被org.talend.model/model/Component.xsd检查
	里面定义的element的出现顺序，如果打开stdio找不到相应组件，可以试图检查这里。

2.ComponentProviderManager
	这个类控制着Component的加载，通过扩展点的方式。

3.tmatchgroup跟踪数据传输
	先从stdio找到ConfigMatchGroupData.java类的tSocketOutput_gen begin代码部分，加断点使服务打开。
	然后从代码找到PreviewSocketServer类运行
	交替运行，看数据传出

4.tmatchGroupHadoop 执行后的查看位置
	http://hadoopmaster1.talend.lan:50070/ 文件查看
	http://hadoopmaster1.talend.lan:50030/ 运行结果查看
	
5.org.talend.designer.core.model.components.Expression
show_if required_if 表达式的最后计算
	
	
6.Shawdom job 不能支持log信息
	tMatchGroupIn_begin.javajet
	org.apache.log4j.Logger.getRootLogger().setLevel(org.apache.log4j.Level.OFF);（6.3.1以上才有）
	
7.org.talend.designer.unifiedcomponent
这里定义了一些未定义的组件，这些组件配合之前的带javajet的组件来起作用。
新的组件被以代理组件的模式使用，参数还是根据带javajet的组件得来的。
代理组件和原始组件之间的参数传递是通过DelegateComponent.java来完成的

8.spark component加载dependency 过程
tSparkConfiguration
tbd-ee下面有这么一个组件，用来记录每种cluster的所需要的jar。
这个组件并不会存储在job的item文件中，而且把属性分散的存在job的属性里。
在它的xml里声明了每种distribution 所需要的不同jar的组合以及生效条件

除此之外还有专门的plugin 去声明每种distribution 所对应的jar包。比如org.talend.hadoop.distribution.dbr550
的plugin.xml里就声明了libraryNeeded的扩展，如果某个jar找不到就先看这两个地方。

另外，如果缺少某个jar可以用tLibraryLoad来临时解决

9. normal component加载dependency过程
LocalLibraryManager.installModules 用这个方法去maven或其他地方查找jar
EmfComponent.getModulesNeeded 用这个方法去指定的component的xml的import去搜集依赖的jar
