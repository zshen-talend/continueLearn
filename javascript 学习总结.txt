1.取得对象类型:
	alert(typeof 对象);

几个对象
	1）Date对象:
		提供了关于日期的操作，其中月为0-11星期为0-6

	2）Math对象:
		提供包括绝对值在内的一系列数学操作

	3）Array对象:
		（1）提供创建数组的方法（new Array(长度或参数列表)），也可以用这样的方法var array1=[1,"2",new Date()];
		（2）当要定义维数组时需要用循环语句把前一个数组的元素定义成数组。或var arr=[[1]，[2]]。。。。。
		（3）length属性是可变的，当其被改大时只是属性被改变，当其被改小时大于length的部分
			数据会丢失
		涉及到的方法：
			toString()以逗号分隔形成数组。
			concact([item1[,item2...]])连接参数数组到数组后面，不改变原有数组，返回改编					后的数组。
			join(分隔符)当分隔符为","时与toString()方法一样。
			pop()如堆栈操作，取出数组的最后一个元素，并在数组中删除。
			push(参数列表)一次可插入多个到数组最后。
			reverse()在原数组上，进行反转操作。
			shift()移去数组中第一个元素。
			slice(start,end)返回子集，参数为负就到着数
			sort(函数名)函数要定义为数组排序的规则，0不动，负数表示不换位，正数表示换位
			splice(start,deleteCount[,item1[,item2[,...]]])删除start开始的指定位数，并				将参数列表插入到start后面。
			unshift(item1[,item2[,...]])将列表插入到数组结尾与push函数正相反。		
	4)String 
		常量类型的字符串typeof输出类型为String，用new String()定制的字符串typeof类型为				object
		字符串的长度计算的是unicode所以不管中英文都算一个字符。

	5)navigator
		提供浏览器及操作系统的信息，例如:
			appName浏览器版本信息
			platform浏览器正在运行的操作平台

	6)location(window和document都有这个属性)
		获取或设置浏览器的当前地址。
		页面跳转原理:
				window.location="http://www.microsoft.com"
				等价于window.location.href="http://www.microsoft.com"
				等价于window.location.assign("http://www.microsoft.com");
				array的length属性的改变也同理。
		属性介绍
			protocol协议名称(例:http:)
			hostname主机名(例:www.x3blog.cn)
			port端口(例:80)
			host主机加端口(例:www.x3blog.cn:80)
			pathname文档路径信息(例:/ajax/3.2.html)
			hash标签名(例:#chapter1)
			search查询字符串(例:?sort=book&id=8215)
			href整个URL

		reload(source)方法
			当source为false时从缓存载入页面
			当source为true时从服务器载入页面
		
		replace(URL)方法(IE6不支持)
			URL表示要跳转到的页面，但与简单属性改变不同的是，这样会覆盖掉上一个页面的历					史
			例:<a href="javasript:void(0)" onclick="location.replace							('page3.html')">page3</a>
		
	
	7)history
		对应浏览器的历史记录功能
		方法
			history.forward();
			history.back();
			history.go(arg)	;arg为正表示forward arg次，为负back arg次，为0刷新，且表单				内容不变。
			

	8)document
		文档处理
		属性
			anchors返回所有标签<a name="...">
			cookie返回或设置cookie
			domain返回或设置文档默认域
			embeds返回所有嵌入对象(<embed>)的数组
			forms返回所有表单的数组
			images返回所有图像的数组
			lastModified返回最后一次修改的日期
			links返回超链接的数组
			location返回或设置文档的地址
			referrer返回页面的父类地址
			title返回或设置文档标题
			URL返回或设置文档地址
		
		方法:
			write和writeln在文档的当前位置写入字符串，作为文档的一部分使用，用					javascript调用
	with(object){}简化对象访问在它的作用范围内，所有产生歧义的方法都会首先考虑以object作开头。

事件处理机制
	this指针只能在标签内使用，不能在标签所调用的函数中使用。除了使用下面的方法把函数与对象绑定		
	无标签的对象调用其函数时格式为object.onEventName=eventHandler(函数名)

	多事件的绑定要使用attachEvent和addEventListener两个方法,适用于不同浏览器。
	它们的参数列表差不多，(eventName,eventHandler,useCapture)只是前者第一个参数用load后者则用	onload。
	例:
		function func()
		//语句
		if(element.addEventListener){
		element.addEventListener("onclick",func,false);
		}else{
		element.attachEvent("click",func,false);
		}
	对于键盘事件的监听
		var txtContent=document.getElementById("txtContent");
		txtContent.onkeydown=function(evt){
		evt=evt?evt:window.event;
		if(evt.ctrlkey && 13==evt.keyCode)this.form.submit();
		}


		表单中的每个表单域都有属性disabled表示该表单项不可操作。
		
		不使用disabled方法而让文本框不可用的方法<input type="text" onfocus="this.blur()"/>当文本框获得焦点时立即失去焦点。

		文本框的高亮显示<input type="text" name="count" onfocus="this.select()"/>

		下拉列表框的动态添加someSelect.options[slt.length]=new Option(value,text);

		删除下拉列表项someSelect.Options[1]=null;

	面向对象的javascript
		传递函数的隐藏参数:arguments 它是存储函数被调用时的实参的数组。
	
		prototype原型对象:函数是对象，函数也是类。prototype代表函数对象的一个子对象，同时也代表函数类的成员集合。

		使用{}创建无类型对象:注意原来的"="变成了现在的":"，最后一句之前的句子要用","分隔开。
		例:
			{
				property1:statement1,
				property2:statement2,
				property3:statement3
			}

		函数的apply、call方法和length属性:以指定的this指针和参数来电用某个函数。
			Function.prototype.apply(thisArg,argArray);
			Function.prototype.call(thisArg[,arg1[,arg2...]]);
			函数的length属性得到的是形参的个数，与arguments的实参个数不同。


		无prototype的new操作符流程:
			(1)当解释器遇到new操作符时就创建一个空对象。
			(2)开始运行class1这个函数，并将其中的this指针都指向这个新建的对象。
			(3)因为当给对象不存在的属性赋值时，解释器就会为该对象创建该属性，例如在class1中，当执行到this.p1=s这条语句时，就会添加一个属性p1，并把变量s的值赋给它，这样函数执行就是初始化这个对象的过程，即实现构造函数的作用。
			(4)当函数执行完后，new操作符就返回初始化后的对象。
		
		prototype的new操作符流程:
			(1)创建一个新的对象，并让this指针指向它。
			(2)将函数的prototype对象的所有成员都赋给这个新对象。
			(3)执行函数体，对这个对象进行初始化操作。
			(4)返回(1)中创建的对象。

		调用类的构造函数:class1.prototype.constructor();
	
	公有成员、私有成员和静态成员
		公有成员:全局变量就是公有成员。		

		私有成员:就是类中的局部变量。不能被peototype定义的函数使用。

		静态成员:由类名直接定义的变量或方法叫做静态成员。

	利用反射来传递样式参数
		function setStyle(_style){
			var element=getElement();
			for(var p in _style){
				element.style[p]=_style[p];
			}

		}								
		用这种方法传递样式参数，可以保证原有的不需要修改的参数不被改动，且代码中p存储的是_style中的属性名，所以要用[]的方法来调用相应属性达到遍历的目		的。

	类的继承
		就是通过prototype和for in把父类的所有属性传递给子类。而且这种传递是一种浅层复制。

	抽象类:
		就是类中的方法在，new一个新的对象的时候实现。
	
	cookie的操作:
		设置cookie就是为cookie的属性赋值，这个值是名=值形式的。
		删除cookie就是把它的事件设置为过去。expires是事件属性。
		取值就是拆分字符串。unescape反编码，escape编码。为了空格等的一些特殊字符以及中文乱码问题。

	框架编程
		window.frames取出所有框架,不同于document.forms,links,images等。window字样也可以用self来代替。
		可以通过parent、top等属性实现孩子、父亲、兄弟之间的查找。
		可以使用一个链接来更新多个框架<a href="frame1.location=3.html;frame2.location=2.html...." >link</a>
		所有的全局变量都是window对象的成员。

		window.open("b,html");同于<a href="b.html" target="_blank">b</a>

			属性:
				height,width,left,top
				directories:连接工具栏
				location:地址栏
				menubar:菜单栏
				resizeable:重设大小
				scrollbars:滚动条
				status:状态栏
				toolbar:工具栏

		延期执行和重复执行
			window.setTimeout(expression,milliseconds);函数名或表达式，毫秒数
			window.setInterval(expression,milliseconds);


		三个交互窗口:
			alter(字符串);
			window.prompt(message,defaultValue);单机确定返回内容 取消返回null
			window.confirm(message);返回true false

		正则表达式:
			var objregExp=/pattern*/[flag]
			var objregExp=new RegExp("pattern"[,"flag"]);pattern是匹配模式 flag是搜索模式包括，g全局搜索、i忽略大小写。

			正则对象的方法
				compile(pattern,flag)将正则表达式转换为内部模式，对于批量匹配可以提高效率。
				exec(str)按照指定的模式匹配字符串str，无匹配返回null，否则返回一个数组，数组包括三个属性:
						input:保存目标字符串
						index:匹配到的字符串在目标字符串中的位置
						lastIdex:匹配到的子字符串后面一个字符串的位置。
				test(str):判断str是否符合指定模式，返回一个布尔变量，不会改变RegExp的属性值。

				RegExp的属性:
					RegExp.input:保存被修改的字符串。
					RegExp.index:保存匹配的首字符位置
					RegExp.lastIndex:保存匹配的字符串的下一个字符的位置。
					RegExp.lastParen:保存最后一个被匹配的字符串。(最后一个括号的内容)
					RegExp.leftContext:保存匹配字符串左边的内容。
					RegExp.rightContext:保存匹配字符串右边的内容。
					RegExp.$1-$9:保存最开始的9个子匹配(括号中的内容)


javaScript的9种数据类型，
	未定义(Undefine)、空(Null)、布尔(Boolean)、字符串(String)、数值(Number)、对象(Object)、引用(Reference)、列表(List)、完成(Completion)。 其中，后三个是运行时的中间代码，所以不能在代码中出现。

几个Global(全局)对象的函数
	eval(字符串)
		功能:把参数根据上下文求出结果(包括alert(a)中的a)
	
	parseInt和parseFloat(字符串)
		功能:取出字符串从开始到数字结束的整数或浮点数。可以有第二个参数来规定返回2到32进制

	escape和unescape(字符串)
		功能:转换URL编码。

	isNaN和isFinite
		功能:判断是否是非字符，是否是有限的。

获取变量的数据类型
	typeof(变量名或常量)

javaScript语言支持像c一样的逻辑判断方式!0为1

javascript提供的escape方法可以将字符转换成URL编码，进而避免中文乱码问题。

脚本头文件的解析
	例:<script language="javascript" type="text/javascript" charset="utf-8" src="url">
		language是早先的版本声明，为兼容IE3.x以前版本的浏览器
		type是以后版本的版本声明，为兼容IHTML4.0以后版本的浏览器

一般脚本都会被加上
<!--
当浏览器不支持脚本的时候就无法解释//所以注释符就会起作用，脚本就不会被执行了。
//-->
函数名也是一个变量
	function max(a,b){
		if(a>b)return a;
		return b;
	}
	var max2=max;
	alert(max2(100,200));
	alert(max2("abc","b"));
而且如果用typeof(max)可以得到"function"

匿名函数
	document.body.onload=function(){

	}

函数定义时把函数赋给变量
	var max=function(){

	}
这样，以后的函数就可以通过max(a,b)来使用了。

对象的引用方法
	document.getElementById(String);
	对象名.属性（方法）名
	除此之外，还可以用方括号的形式来引用：
	对象名["属性（方法）名"]
	注意，这里的方法名和属性名是一个字符串，而非原先点号后面的标识符，例如：

//数组的使用
数组的声明
emp=new Array(3);
数组的赋值
emp[0]="asfasfas";
该对象对应的方法
emp.length返回数组大小
sort();
join();		//“()”中为加入的分隔符
reverse();	//翻转字符串

typeof(变量)返回一个字符串用来表示变量的具体类型

switch语句中可以比较一个字符串

this用于指定当前对象的引用

for（变量in对象或数组）//变量须自定义
作用：自动对变量赋值，达到遍历对象的所有属性或数组的所有元素的目的

new新建对象类型实例，function所定义的既可以说是函数也可以说是类，可以被new新建也可以被直接调用。

with（Math）{
在其下的所有变量都假定引用指定的对象(Math)
}

String 对象
-length
-big()
-small()
-bold()
-blink()//闪烁
-toUpperCase()
-toLowerCase()

Math 对象
-PI
-LN10
-E
-abs(number)
-sin(number)
-cos(number)

Date对象

注意
事件是用于调用其它函数的如:<body onLoad=alert("") onUnload=alert("")>或<img src="" onError="自定义函数">
函数调用不一定需要""但属性的赋值必须要有""
而且在javascript中属性的使用有两种方法1 img<src="...">  2对象名.属性名
onLoad事件
当浏览器加载窗口时
当浏览器加载框架集的所有框架时
当浏览器加载影像时
相关对象window image frame document

unLoad
卸载(离开)相关对象时
相关对象同上

onError
当文件无法正确加载时
当影像无法正确加载时

关于鼠标的操作
onMouseDown  	鼠标按下
onMouseOut  	鼠标脱离
onMouseOver	鼠标经过
onClick		鼠标单击(包括down和up)
onDblClick	鼠标双击
onDragDrop	鼠标拖拽
onMouseUp	鼠标放开
onMouserMove	鼠标移动

表的事件
onSubmit	表的提交
onReset		表的重制

其他事件
onFocus		得到焦点
onKeyPress	键盘输入(包括down和up)
onKeyDown	键盘按下
onKeyUp		键盘弹起
onSelect	
onResize	文档重设大小

event.button记录了按下鼠标不同的键位时返回的整数值
0鼠标右键
1鼠标左键
4鼠标中间
仅限于我的电脑上的浏览器

函数的定义
如果函数要有返回值在调用时要声明如return 函数名();

用script调用标签中的属性
<SCRIPT>
function simclick1()
{
chk1.focus(); //focus is explicitly set
chk1.click();
}
function simclick2()
{
chk1.click();
}
</SCRIPT>
<SCRIPT FOR=chk1 EVENT=onfocus>		//针对某个id的script
alert("check box is in focus!");
</SCRIPT>
</HEAD>
<BODY>

<INPUT Type="CHECKBOX" id=chk1></INPUT>	//要在script中必须使用对象 要设置id且id和name不相冲突
<br>
<BUTTON onclick="simclick1()">This button <B>applies the focus method</B> to
check box</BUTTON>
<br><BUTTON onclick="simclick2()">This button <B>does not apply the focus
method</B> to check box</BUTTON>
<br>

对于允许script脚本执行的浏览器和不允许script脚本的浏览器区别对待
	<script language="javascript">
	var a;
	a="这是使用&lt;script&gt定义的内容<p>";
	document.write(a);
	</script>
	<noscript>
	这是使用&lt;noscript&gt定义的内容
	</noscript>

改变背景颜色和字体颜色
	<script language = "JavaScript">
	document.write("<body bgcolor='black' text='yellow'>");
	document.write("这是嵌入HTML中的代码生成的行。");
	</script>

返回值为Infinity最大值
	<script language="javascript">
	<!--
	var x = 1.7976931348623157e308;     // 为x赋值为最大值
	x = x + 1e292;                      // 增加x的值
	alert(x);                           // 显示结果
	//-->
	</script>

NaN非法值
	<script language="javascript">
	<!--
	var x = 0 / 0;            // 为x赋值为NaN
	if (x != x)               // 通过与自身比较来确定
	{
	alert(x);                //显示结果输出
	}
	if (isNaN(x))             // 通过isNaN()方法来检测
	{
	alert("x是NaN");        //显示结果输出
	}
	//-->
	</script>

关于最大值与最小值
	<script language="javascript">
	<!--
	var posInf = Number.POSITIVE_INFINITY; //为posInf赋值最大值
	var negInf = Number.NEGATIVE_INFINITY; //为negInf赋值最小值
	alert(posInf == negInf); //二者比较，实际为Infinity与-infinity比较结果为false
	alert(posInf == -negInf); //Infinity与-(-Infinity)比较，结果为true
	alert(posInf == -negInf+1);//最大值加1,仍为最大值，结果为true
	alert(posInf == -negInf*100);//最大值乘以100，仍为最大值，结果为true
	alert(Number.MAX_VALUE);//显示可表示的最大值：1.7976931348623157e+308
	//-->
	</script>

回车符“\n”

单引号与双引号的区别
	<script language="javascript">
	<!--
	var string1 = "These quotes \"are\" valid!";
	var string2 = 'Isn\'t JavaScript great?';
	var string3 = "These quotes 'are' valid!";
	var string4 = 'These quotes "are" valid!';
	document.write("This is string1:"+string1+"<br>");
	document.write("This is string2:"+string2+"<br>");
	document.write("This is string3:"+string3+"<br>");
	document.write("This is string4:"+string4);
	//-->
	</script>

判断用户是否开了cookie
	<script language="javascript">
	<!--
	if (navigator.cookieEnabled)  //当用户允许使用cookie时
	{//弹出一个对话框，显示允许Cookie
	alert("Persistent cookies are enabled");   
	}
	else
	{
	alert("Persistent cookies are not enabled");
	}
	//-->
	</script>

var变量的默认值null==undefined
	<script language="javascript">
	<!--
	var x; //x未赋值，其值为undefined
	var y = null; //y赋值为null
	var z = undefined;//z赋值为undefined
	document.write("x:"+x+"<br>");//显示x的值：undefined
	document.write("y:"+y+"<br>");//显示y的值:null
	document.write("z:"+z+"<br>");//显示z的值：undefined
	if (x == null) //x与null进行比较，结果为true
  	{
	  document.write(111);
	  }
	if (x == y)// x与y进行比较,结果为true
	  {
	  document.write(222);
	  }
	if (x == undefined) //x与undefined进行比较，结果为true
	  {
	  document.write(333);
	  }
	//-->
	</script>	

数组操作
	<script language="javascript">
	<!--
	var a=[1,2,3];
	var b=a;
	a[0]=99;
	document.write("字符串a的值为："+a+"<p>");
	document.write("字符串b的值为："+b);
	//-->
	</script>


字符串转换成boolean类型
	<script language="javascript">
	<!--
	var x = "false";  // x值为非空字符串
	if (x) 
	  {
	    alert("x 转换为逻辑值 true");
	  }
	//-->
	</script>

string大写转小写
	<script language="javascript">
	<!--
	var myStringObject = new String("ABCdeFg");
	var lowercased = myStringObject.toLowerCase();
	alert(myStringObject+" 转换为小写字母后为："+lowercased); 
	//-->
	</script>

字符串的比较	
	<script language="javascript">
	<!--
	var s1 = "hello";
	var s2 = "hell"+"o"; //s2含有与s1相同的内容
	if(s1==s2) //对s1和s2进行比较，根据结果判断字符串是何种方式进行比较
	document.write("字符串是按值进行比较的。");
	else
	document.write("字符串是按引用进行比较的。");
	//-->
	</script>

字符串拼接的顺序问题
	<script language="javascript">
	<!-- //首先定义几个变量，并为它们赋予不同类型的值
	var w = 5;
	var x = 20;
	var y = "Mengite Network Technology! ";
	var z = true;
	alert(w+x+y+z); //将不同类型的数据连接起来，并输出
	//-->
	</script>

赋值语句变逻辑值
	<script language="javascript">
	<!--
	var x = 1;    //x赋初值
	var y = 5;    //y赋初值
	if (x = y)    //错将“==”写为"="
	alert("x、y 相等");
	else
	alert("x、y 不相等");
	//-->
	</script>

遵循','表达式

	a =void (b=5, c=7, d=56);
		结果undefine

	a = (b=5, c=7, d=56);
		结果a=56


document
	write("")//输出
	取出页面上的对象元素 getElementById

typeof的用法
	<script language="javascript">
	<!--
	a = 3;
	b=null;
	name = "Three";
	alert("a的类型："+(typeof a)+"\nb的类型:"+(typeof b)+"\nname的类型"+(typeof name)); 
	//-->
	</script>

输出日期
	<script language="javascript">
	<!--
	var today = new Date();    //取当前日期时间
	alert(today);
	today = null;    //置为null
	alert(today);
	//-->
	</script>

数组元素剔除
	<script language="javascript">
	<!--
	var myArray = ['1', '3', '78', '1767'];
	document.write("myArray before delete = " + myArray);//显示删除前数组的值
	document.write("<br />");
	delete myArray[2];  // 删除数组的第三个元素
	document.write("myArray after delete = " + myArray); //显示删除后数组的值
	//-->
	</script>

与table标签配合使用
	
	<table width="100%" border="1">
	<script language="JavaScript">
	<!--
	var n = 1;
	while( n <= 5 )               //循环5次
	{  //写出表格的行，共5行
	document.write( "<tr><td align=center>" + "这是第 "+n+" 行</td></tr>" );
	n++; 
	}
	// -->
	</script>
	</table>

对于输出的控制
	<script language="JavaScript">
	<!--
	var m = 8;
	var n = 9;
	while( m <= 5 )   
	{
	document.write( "这是第 "+m+" 行" );
	m++; 
	}
	do
	{
	document.write("这是第 "+n+" 个" );
	n++;
	}while(n<=5);
	//-->
	</script>

矩阵的输出
	<script language="JavaScript">
	<!--
	for(var m=1;m<=9;m++)//输出行
	{
		for(var n=1;n<=m;n++)//输出列
		{
			if(n*m<10) //对所有的一位数增加前置空格。
			{
				document.write("&nbsp;"); 
			}
			document.write(n*m+"&nbsp;");//显示乘法表的行，两数之间有空格分开。
		}
		document.write("<br>");//每行输出结束后换行，开始下一行。
	}
	//-->
	</script>
	
使用break达到以上相同的效果
	<script language="JavaScript">
	<!--
	var m=1;
	var n=1;
	for(;;)  //这里使用了无限循环语句
	{
	for(;;)
	{
	if(n*m<10) //对所有的一位数增加前置空格。
	{
	document.write("&nbsp;"); 
	}
	document.write(n*m+"&nbsp;");//显示乘法表的行，两数之间有空格分开。
	n++
	if(n>m)
	break;
	}
	document.write("<br>");    //换行
	m++;
	n=1;
	if(m>9)
	break;
	}
	//-->
	</script>
	
二十以内的奇数
	<script language="JavaScript">
	<!--
	var output = "";//output初值为空字符串
	for(var x=1;x<20;x++)//求20以内的奇数
	{
	if(x%2==0)//如果是偶数就跳过
	continue;
	output=output+"x="+x+" ";//如果是奇数，就附加在output字符串的后面，组成新字符串
	}
	document.write(output);//输出结果
	//-->
	</script>

函数使用（发现javascript中的语句也是在任何地方都能用，而且输出与所在位置有关）
	<script language="javascript">
	<!--
	function sayHello()                //函数定义开始
	{
	alert("Hello World!");        //函数内的程序语句，这里是弹出消息
	}
	sayHello();                       //调用已定义的函数
	//-->
	</script>

页面打开提示输入密码输入框为prompt（基于输入对话框使得程序暂停的特点，与confirm("111")不同）
	<script LANGUAGE="JAVASCRIPT">
	<!--
	function loopy()                   //函数定义开始
	{
	var sWord =""
	while (sWord != "******")    //这里是密码！
	{ 
	sWord = prompt("输入正确密码才能登陆!本页密码:******");       //显示提示信息
	}
	alert("呵呵...欢迎光临！");
	}
	loopy();                //函数调用
	//-->
	</script>  

排列组合的算法
	<script LANGUAGE="JAVASCRIPT">
	<!--
	function ni(x) //这里还是代码5.3中的求阶乘函数
	{
	var y = x,k=1;      //定义几个变量，供下面使用
	for(x=1;x<=y;x++)  //这个循环求阶乘
	{
	k = k*x;
	}
	return k;           //返回所求结果
	}
	var m=8,n=2;        //每两组共8支队伍，有且仅有2支队伍会进入8强
	//利用组合数公式，调用3次求阶乘函数，直接利用返回值进行计算，并输出结果
	alert("可能的组合有："+(ni(m)/(ni(n)*ni(m-n)))+"种。");
	//-->
	</script>

当图像无法正确加载时传递的图像加载标签对象及错误处理
	<script>
	function handelError(img){
	alert("无法加载"+img.name+", \n载入替代图档。。。");
	img.src="1111.jpg";
	}
	</script>
	</head>
	<body onMouseDown=alert(event.button+event.x+event.y) onselect=alert(this.returnValue)>//全文档鼠标监测
	<cite>这是引用</cite>
	<em>这是斜体</em>

	<img src="aa.jpg" alt="我的图片" onError=handelError(this)>//初始图片导入
	</body>

变量的声明对输出语句的影响
	<script type="text/javascript">
	<!--
	var x=1,y=2,c;
	function sum(x,y)
	{
	document.write("函数中尚未定义a，其值为："+a+"<p>");
	document.write("在对x赋值之前x的值为："+x+"<p>");
	var x=0,y=4;
	document.write("定义x并对x赋值之后x的值为："+x+"<p>");
	z=x+y;
	x=x+y;
	var a=8;
	document.write("现在已为a赋值，其值为："+a+"<p>");
	document.write("在进行x=x+y操作之后x的值为："+x+"<p>");
	alert("1");
	document.write("函数中尚未定义b，其值为："+b+"<p>");
	var b=0;	//当此处没有b的定义时上面的话将不被执行且其后所有程序都不执行，可见出错了！！
	alert("2");
	return z;
	}
	alert("3");
	var m=sum(x,y);
	alert(m);
	// -->
	</script>

默认参数和默认参数数组的使用
	<Script language="javascript">
	<!--
	function testparams()
	{
	var params="";
	for(var i=0;i<arguments.length;i++)
	params=params+""+arguments[i];
	alert(params);
	}
	//函数调用与结果输出
	testparams("abc",123);
	testparams(123,456,"abc");
	//-->
	</script>

动态函数的使用(参数要由双引号单独引用，函数内容要由引号单独引用)
	<Script language="javascript">
	<!--
	//等号的右边是一个动态创建的函数，注意其变量、语句及返回值的写法
	var square=new Function("x","y","var sum;sum=x*x+y*y;return sum;"); 
	alert(square(3,2));    //调用该动态函数并显示其结果
	//-->
	</script>

将网络地址转成unicode形势
	<Script language="javascript">
	<!--
	//将encodeURI方法的结果赋值给一个变量
	var urlStr=encodeURI("http://www.yahoo.com/index.htm?news=体育家&name=zt");
	alert(urlStr);  //显示该变量的值
	//-->
	</script>

将上面的东西反转回来
	<Script language="javascript">
	<!--
	//将decodeURI方法的结果赋值给一个变量
	var urlStr=decodeURI("http://www.yahoo.com/index.htm?"+
	"country=%E4%B8%AD%E5%9B%BD&name=z%20k");
	alert(urlStr); //显示该变量的值
	//-->
	</script>

字符串转成float
	<Script language="javascript">
	<!--
	var fltStr="2.6";
	alert((fltStr+1)+"\n"+(parseFloat(fltStr)+1)); //转换并输出
	//-->
	</script>

特殊符号转换命令
	<Script language="javascript">
	<!--
	//这里选用了几个值大于255的Unicode字符
	var a = escape('←↑→↓');
	alert("←↑→↓经escape方法处理后为:\n"+a);
	//-->
	</script>

上面的反操作
	<Script language="javascript">
	<!--
	//这里选用了几个值大于255的Unicode字符
	var a = unescape('%u2190%u2191%u2192%u2193');
	alert("%u2190%u2191%2192%u2193经unescape方法处理后为:\n"+a);
	//-->
	</script>

对象的声明、定义、嵌套使用、随时定义属性
	<script language="javascript">
	<!--
	var book = new Object();//创建一个对象，并保存在一个变量中
	book.title = "Book1";//设置该对象的一个属性
	//设置更多的属性，注意其层次关系
	book.chapter1 = new Object();
	book.chapter1.title ="第一章";
	book.chapter1.pages = 25;
	book.chapter2 = {title:"第二章",pages:30};
	//调用该对象的某些属性
	alert("输出结果："+"\n\t\n\t"+book.title+"\n\t"+"Chapter 1: "
	+book.chapter1.title+"\n\t"+"chapter 2: "+ book.chapter2.title);
	//-->
	</script>
	
对象的实例化使用
	<script language="javascript">
	<!--
	function Student(name,age,sex)
	{
	this.name = name;
	this.age = age;
	this.sex = sex;
	this.out = outFunc;
	}
	function outFunc()
	{
	document.write(this.name+":"+this.age+"&nbsp;"+this.sex+"；");
	}
	//创建对象实例并调用
	var student1 = new Student("李明",18,"男");
	student1.out();
	var student2 = new Student("王飞",16,"男");
	student2.out();
	document.write("<p>"); //换行
	var student3 = new Student("赵琳",17,"女");
	student3.out();
	var student4 = new Student("孙皓",19,"男");
	student4.out();
	//-->
	</script>

数组的自由定义使用
	<script language="javascript">
	<!--
	var a = new Array();
	document.write("没有定义元素时的长度："+a.length+"<p>");
	a = new Array(10);
	document.write("定义10个空元素后的长度："+a.length+"<p>");
	a = new Array(1,2,3);
	document.write("定义0～2元素后的长度："+a.length+"<p>");
	a = [4,5];
	document.write("定义元素0和1后的长度："+a.length+"<p>");
	a[5] = -1;
	document.write("再定义元素5后的长度："+a.length+"<p>");
	a[49] = 0;
	document.write("再定义元素49后的长度："+a.length+"<p>");
	//-->
	</script>

未定义的数组元素输出undefined

function函数的默认参数arguments是用
	<script language="javascript">
	<!--
	function MyArray()
	{
	this.length = arguments.length;
	for(var i=0;i<this.length;i++)
	{
	this[i]=arguments[i];
	}
	}
	var str = "";
	var arr = new MyArray(4,3.5,"abc");
	for(var i=0;i<arr.length;i++)
	{
	str += arr[i]+"\n";
	}
	alert(str);
	//-->
	</script>
for(x in arr)方法遍历一个对象且通过函数建数组
	<script language="javascript">
	<!--
	function MyArray(size)
	{
	this.length = size;
	for(var i=0;i<size;i++)
	{
	this[i]="";
	}
	}
	var arr = new MyArray(2);
	arr[0] = "梅辛";
	arr[1] = "Mengite";
	arr[2] = "蒙兴网技";
	var x, str = "";
	for(x in arr)
	{
	str += x + ":"+arr[x]+"\n";
	}
	alert(str);
	//-->
	</script>


在数组中加入分隔符
	<script language="javascript">
	<!--
	var a = [1,2,3];    //用3个元素创建一个数组
	s1 = a.join();       //s=="1,2,3"
	s2 = a.join("，");    //这里使用了中文的“，”做分隔符

	alert(s1+"\n"+s2+"\n"+s3);   //结果输出
	//-->
	</script>


翻转数组内容
	<script language="javascript">
	<!--
	var a = ["梅辛","Mengite","蒙兴网技"];  //创建数组
	alert(a.reverse());                   //颠倒顺序并输出
	//-->
	</script>

for(prop in attr)遍历对象prop为对象中的各个属性
	<script language="javascript">
	<!--
	function Student()
	{
	this.name = "张华";
	this.age = "19";
	this.height = "172";
	}
	var attr = new Student();
	var prop,stru ="";
	for(prop in attr)
	{
	stru += prop+" ";
	}
	alert(stru);
	//-->
	</script>
	
用for(prop in attr)遍历对象，对象的值用“attr[prop]”形势表示
	<script language="javascript">
	<!--
	function Student()
	{
	this.name = "张华";
	this.age = "19";
	this.height = "172";
	}
	var attr = new Student();
	var prop,stru ="";
	for(prop in attr)
	{
	stru += attr[prop]+" ";
	}
	alert(stru);
	//-->
	</script>


取数组的子串slice中两个参数分别代表开始位置（包含）和结束位置（不包含），
一个参数代表起始位置到最后
	<script language="javascript">
	<!--
	var a = [1,2,3,4,5];
	alert(a.slice(0,3)+"\n"+a.slice(3)+"\n"+a.slice(1,-1)+"\n"+a.slice(-3,-2));
	//-->
	</script>

取数组的子串splice单个参数不能显示，两个参数代表开始下标和取串的长度
	<script language="javascript">
	<!--
	var a = [1,2,3,4,5,6,7,8];
	alert(a.splice(5)+"\n"+a.splice(2,3)+"\n"+a.splice(1,1));
	//-->
	</script>


外部定义类内部显示
	<script language="javascript">
	<!--
	function outStudent(attr)
	{
	document.write(student[attr]+"&nbsp;");
	}
	var student = new Object();
	student.name = "张华";
	student.age ="18";
	outStudent("name");
	outStudent("age");
	//-->
	</script>

字符串的anchor方法，返回一个name为 方法中的参数字符串的a标签	
	<script language="javascript">
	<!--
	var strVariable = "这是一个anchor例子";
	strVariable = strVariable.anchor("anchor示例");
	alert(strVariable);
	//-->
	</script>

字符串的big方法，返回一个内容为 方法中的参数字符串的big标签
	<script language="javascript">	
	<!--
	var strVariable = "这是一个big方法的例子";
	strVariable = strVariable.big();
	alert(strVariable);
	//document.write("<p>这是一个普通显示的例子");
	//-->
	</script>
	
字符串的fontcolor方法，返回一个颜色为 方法中的参数字符串的字符串
	<script language="javascript">
	<!--
	var strVariable = "这是一个fontcolor方法的例子";
	strVariable = strVariable.fontcolor("red");
	document.write("<h1>"+strVariable+"</h1>");
	//-->
	</script>

找寻参数字符串第一次出现的下标位置
	str.indexOf('is')

找寻参数字符串最后一次出现的下标位置
	str.lastIndexOf('aa')	

字符串的link方法，返回一个href为 方法中的参数字符串的a标签
<script language="javascript">
<!--
//定义变量并为其赋初期为一个字符串
var strVariable = "这是一个link方法的例子"; 
//将example001.htm作为一个超级链接存储
strVariable = strVariable.link("example001.htm"); 
alert(strVariable);  //结果输出
//-->
</script>

对字符串的操作集合
	<script language="javascript">
	document.write("<h1>字符串转换与匹配</h1>")
	var str="This is my first Script code.";
	document.write("原字符串为："+str+"<br>")
	document.write("第五个字符之后的部分："+str.slice(5,-1)+"<br>");
	document.write("第五个字符之后的15个字符："+str.substr(5,15)+"<br>");
	document.write("第五个字符后至第15个字符："+str.substring(5,15)+"<br>");
	document.write("转换为小写形式："+str.toLowerCase()+"<br>");
	document.write("转换为大写形式："+str.toUpperCase()+"<br>");
	</script>

对date方法返回的日期细化拆分注意 月份是从0开始的
	<script language="javascript">
	<!--
	var curr_time = new Date();
	var strDate = curr_time.getYear()+"年";
	strDate += curr_time.getMonth()+1+"月";
	strDate += curr_time.getDate()+"日";
	strDate += curr_time.getHours()+":";
	strDate += curr_time.getMinutes()+":";
	strDate += curr_time.getSeconds();
	alert(strDate);
	//-->
	</script>

十进制和其它进至间的转化
	<script language="javascript">
	<!--
	var x=333; //变量定义
	//输出结果
	alert(x+"转换为16进制是:"+x.toString(16)+"\n"+x+"转换为2进制是:"+x.toString(2));
	//-->
	</script>
	

页面中字体的变大变小
	<html>
	<head>
	<SCRIPT type=text/javascript>
	function fontZoom(size)
	{	
 	   document.getElementById('content').style.fontSize=size+'px';
	}
	</SCRIPT>
	</head>
	<body >
		<a href="javascript:fontZoom(30)">变</a>
	<div class='content' id='content'>
	看我七十二变
	</div>
	
	</body>
	</html>
		
定时调用某个方法
	setInterval(方法名,定时执行的时间间隔)

1.关于iframe的使用
iframe中的js要想访问主页面，需要使用parent对象。其中访问主页面中的方法使用parent.方法名。访问主页中的document使用parent.document。

2.关于js操作html中的xml的使用(oDelDom	= new ActiveXObject("MSXML2.DOMDocument.5.0"))

3.要想得知typeof 返回类型为object是被什么函数构造的
	obj.constructor就可以得知，记录的其实是构造函数的名称。

4.取得iframe的document
var iframe = document.getElementById('frameLdpy');
				var Doc = iframe.document;
				if(iframe.contentDocument){ // For NS6
    				Doc = iframe.contentDocument;
				}else if(iframe.contentWindow){ // For IE5.5 and IE6
    				Doc = iframe.contentWindow.document;
				}

5.关于Array的应用
	document.getElementsByName()取得的并不是数组，且会把自身也算在内作为第一个元素。

