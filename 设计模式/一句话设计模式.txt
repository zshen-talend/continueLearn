1.抽象工厂模式：
优势：很容易创建新的工厂。
劣势：很难创建新的元素。
一个工厂对应多种产品，增加新产品需要多多个调整

2.适配器模式
三种情况需要考虑使用适配器模式：
1）当要扩展一个没有源码的类时。
2）当做数据迁移的改变时。
3)当新模型差异和旧模型差异不大时。

3.桥接模式
拆分功能扩展和实现扩展

4.建造者模式
这个模式很像工厂模式。
区别在于，当有很多元素组成一个对象是用建造者模式

5.命令模式
支持撤销和重做
添加新的命令很容易

6.组合模式
多用在文件系统或者树形结构

7.装饰器模式
一个类想扩展新功能时
在运行时添加和移除某个功能时

8.外观模式
减少程序的复杂度
易于更换程序的展示形式

9.工厂模式
一产品对应一个工厂。
所以扩展新厂品相对简单

10.享元模式
大内存对象使用同一个实例
缺点，修改的时候所有实例同时变化

11.解释器模式
多余于语法解释
同样的操作，多种组合

12.备忘录模式
执行状态存储，随时恢复

13.观察者模式
一个执行者需要自动响应其它执行者的变化

14.原型模式
1）子类太多不能一一创建
2）创建类过于复杂（如手绘图案）
3）拆分框架和对象实例（易用性）

15.代理模式
1）被代理的工作费时费力
2）被代理的工作可以延时加载

16.单态模式
单态对象是共享单元

17.状态模式
同一对象要在不同情况对相同请求做出不同反应

18.策略模式
同一主体为达到相同结果，使用不同方式