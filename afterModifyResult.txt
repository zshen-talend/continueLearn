# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: C:\Program Files\Java\jre1.8.0_51\bin\java.exe
# VM options: -Dfile.encoding=UTF-8
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: talend.shenzetestJMH.TSwooshGroupingJMHTest.execute

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
9.607 ＼(99.9%) 0.189 us/op
# Warmup Iteration   2: 8.684 ＼(99.9%) 0.305 us/op
# Warmup Iteration   3: 8.776 ＼(99.9%) 0.399 us/op
Iteration   1: 8.660 ＼(99.9%) 0.133 us/op
                 execute，p0.00:   7.544 us/op
                 execute，p0.50:   8.144 us/op
                 execute，p0.90:   8.448 us/op
                 execute，p0.95:   8.752 us/op
                 execute，p0.99:   18.400 us/op
                 execute，p0.999:  27.744 us/op
                 execute，p0.9999: 74.944 us/op
                 execute，p1.00:   11239.424 us/op

Iteration   2: 8.646 ＼(99.9%) 0.226 us/op
                 execute，p0.00:   7.544 us/op
                 execute，p0.50:   8.144 us/op
                 execute，p0.90:   8.448 us/op
                 execute，p0.95:   8.752 us/op
                 execute，p0.99:   16.576 us/op
                 execute，p0.999:  26.560 us/op
                 execute，p0.9999: 61.851 us/op
                 execute，p1.00:   19693.568 us/op

Iteration   3: 8.553 ＼(99.9%) 0.090 us/op
                 execute，p0.00:   7.544 us/op
                 execute，p0.50:   8.144 us/op
                 execute，p0.90:   8.448 us/op
                 execute，p0.95:   8.752 us/op
                 execute，p0.99:   16.288 us/op
                 execute，p0.999:  26.848 us/op
                 execute，p0.9999: 99.500 us/op
                 execute，p1.00:   6160.384 us/op

Iteration   4: 8.610 ＼(99.9%) 0.137 us/op
                 execute，p0.00:   7.544 us/op
                 execute，p0.50:   8.144 us/op
                 execute，p0.90:   8.448 us/op
                 execute，p0.95:   8.752 us/op
                 execute，p0.99:   16.576 us/op
                 execute，p0.999:  26.848 us/op
                 execute，p0.9999: 106.239 us/op
                 execute，p1.00:   11534.336 us/op

Iteration   5: 8.867 ＼(99.9%) 0.168 us/op
                 execute，p0.00:   7.544 us/op
                 execute，p0.50:   8.144 us/op
                 execute，p0.90:   8.752 us/op
                 execute，p0.95:   9.648 us/op
                 execute，p0.99:   20.512 us/op
                 execute，p0.999:  35.904 us/op
                 execute，p0.9999: 275.237 us/op
                 execute，p1.00:   12795.904 us/op



Result "talend.shenzetestJMH.TSwooshGroupingJMHTest.execute":
  N = 1446416
  mean =      8.666 ＼(99.9%) 0.070 us/op

  Histogram, us/op:
    [    0.000,  1250.000) = 1446403 
    [ 1250.000,  2500.000) = 5 
    [ 2500.000,  3750.000) = 2 
    [ 3750.000,  5000.000) = 1 
    [ 5000.000,  6250.000) = 1 
    [ 6250.000,  7500.000) = 0 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 1 
    [11250.000, 12500.000) = 1 
    [12500.000, 13750.000) = 1 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 0 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, us/op:
      p(0.0000) =      7.544 us/op
     p(50.0000) =      8.144 us/op
     p(90.0000) =      8.448 us/op
     p(95.0000) =      8.752 us/op
     p(99.0000) =     17.184 us/op
     p(99.9000) =     29.856 us/op
     p(99.9900) =     92.682 us/op
     p(99.9990) =   1140.883 us/op
     p(99.9999) =  16614.334 us/op
    p(100.0000) =  19693.568 us/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode      Cnt      Score   Error  Units
shenzetestJMH.TSwooshGroupingJMHTest.execute                  sample  1446416      8.666 ＼ 0.070  us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.00    sample               7.544          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.50    sample               8.144          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.90    sample               8.448          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.95    sample               8.752          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.99    sample              17.184          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.999   sample              29.856          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.9999  sample              92.682          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p1.00    sample           19693.568          us/op
