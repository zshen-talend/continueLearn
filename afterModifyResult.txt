# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: C:\Program Files\Java\jre1.8.0_51\bin\java.exe
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: talend.shenzetestJMH.TSwooshGroupingJMHTest.execute

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
# Warmup Iteration   1: SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
0.010 ＼(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.009 ＼(99.9%) 0.001 ms/op
# Warmup Iteration   3: 0.009 ＼(99.9%) 0.001 ms/op
# Warmup Iteration   4: 0.009 ＼(99.9%) 0.001 ms/op
# Warmup Iteration   5: 0.009 ＼(99.9%) 0.001 ms/op
Iteration   1: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.034 ms/op
                 execute，p0.9999: 0.306 ms/op
                 execute，p1.00:   23.986 ms/op

Iteration   2: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.019 ms/op
                 execute，p0.999:  0.051 ms/op
                 execute，p0.9999: 0.549 ms/op
                 execute，p1.00:   34.144 ms/op

Iteration   3: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.036 ms/op
                 execute，p0.9999: 0.347 ms/op
                 execute，p1.00:   6.308 ms/op

Iteration   4: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.032 ms/op
                 execute，p0.9999: 0.378 ms/op
                 execute，p1.00:   30.966 ms/op

Iteration   5: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.033 ms/op
                 execute，p0.9999: 0.683 ms/op
                 execute，p1.00:   9.830 ms/op

Iteration   6: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.036 ms/op
                 execute，p0.9999: 0.725 ms/op
                 execute，p1.00:   2.666 ms/op

Iteration   7: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.034 ms/op
                 execute，p0.9999: 0.141 ms/op
                 execute，p1.00:   22.446 ms/op

Iteration   8: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.039 ms/op
                 execute，p0.9999: 0.602 ms/op
                 execute，p1.00:   32.178 ms/op

Iteration   9: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.018 ms/op
                 execute，p0.999:  0.041 ms/op
                 execute，p0.9999: 0.238 ms/op
                 execute，p1.00:   8.028 ms/op

Iteration  10: 0.009 ＼(99.9%) 0.001 ms/op
                 execute，p0.00:   0.008 ms/op
                 execute，p0.50:   0.008 ms/op
                 execute，p0.90:   0.009 ms/op
                 execute，p0.95:   0.009 ms/op
                 execute，p0.99:   0.017 ms/op
                 execute，p0.999:  0.037 ms/op
                 execute，p0.9999: 0.277 ms/op
                 execute，p1.00:   12.206 ms/op



Result "talend.shenzetestJMH.TSwooshGroupingJMHTest.execute":
  N = 2862904
  mean =      0.009 ＼(99.9%) 0.001 ms/op

  Histogram, ms/op:
    [ 0.000,  2.500) = 2862872 
    [ 2.500,  5.000) = 16 
    [ 5.000,  7.500) = 2 
    [ 7.500, 10.000) = 6 
    [10.000, 12.500) = 3 
    [12.500, 15.000) = 0 
    [15.000, 17.500) = 0 
    [17.500, 20.000) = 0 
    [20.000, 22.500) = 1 
    [22.500, 25.000) = 1 
    [25.000, 27.500) = 0 
    [27.500, 30.000) = 0 
    [30.000, 32.500) = 2 
    [32.500, 35.000) = 1 
    [35.000, 37.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =      0.008 ms/op
     p(50.0000) =      0.008 ms/op
     p(90.0000) =      0.009 ms/op
     p(95.0000) =      0.009 ms/op
     p(99.0000) =      0.017 ms/op
     p(99.9000) =      0.037 ms/op
     p(99.9900) =      0.398 ms/op
     p(99.9990) =      2.673 ms/op
     p(99.9999) =     31.132 ms/op
    p(100.0000) =     34.144 ms/op


# Run complete. Total time: 00:02:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode      Cnt   Score    Error  Units
shenzetestJMH.TSwooshGroupingJMHTest.execute                  sample  2862904   0.009 ＼  0.001  ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.00    sample            0.008           ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.50    sample            0.008           ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.90    sample            0.009           ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.95    sample            0.009           ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.99    sample            0.017           ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.999   sample            0.037           ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.9999  sample            0.398           ms/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p1.00    sample           34.144           ms/op
