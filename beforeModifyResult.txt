# JMH version: 1.21
# VM version: JDK 1.8.0_51, Java HotSpot(TM) 64-Bit Server VM, 25.51-b03
# VM invoker: C:\Program Files\Java\jre1.8.0_51\bin\java.exe
# VM options: -Dfile.encoding=UTF-8
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: talend.shenzetestJMH.TSwooshGroupingJMHTest.execute

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
8.842 ＼(99.9%) 0.206 us/op
# Warmup Iteration   2: 8.402 ＼(99.9%) 0.438 us/op
# Warmup Iteration   3: 8.356 ＼(99.9%) 0.128 us/op
Iteration   1: 8.405 ＼(99.9%) 0.050 us/op
                 execute，p0.00:   7.240 us/op
                 execute，p0.50:   7.848 us/op
                 execute，p0.90:   8.448 us/op
                 execute，p0.95:   10.864 us/op
                 execute，p0.99:   15.984 us/op
                 execute，p0.999:  26.560 us/op
                 execute，p0.9999: 633.647 us/op
                 execute，p1.00:   1204.224 us/op

Iteration   2: 8.389 ＼(99.9%) 0.403 us/op
                 execute，p0.00:   7.240 us/op
                 execute，p0.50:   7.848 us/op
                 execute，p0.90:   8.144 us/op
                 execute，p0.95:   8.448 us/op
                 execute，p0.99:   15.984 us/op
                 execute，p0.999:  25.952 us/op
                 execute，p0.9999: 699.861 us/op
                 execute，p1.00:   36700.160 us/op

Iteration   3: 8.278 ＼(99.9%) 0.046 us/op
                 execute，p0.00:   7.240 us/op
                 execute，p0.50:   7.848 us/op
                 execute，p0.90:   8.144 us/op
                 execute，p0.95:   8.448 us/op
                 execute，p0.99:   15.984 us/op
                 execute，p0.999:  26.560 us/op
                 execute，p0.9999: 144.169 us/op
                 execute，p1.00:   957.440 us/op

Iteration   4: 8.318 ＼(99.9%) 0.122 us/op
                 execute，p0.00:   7.240 us/op
                 execute，p0.50:   7.848 us/op
                 execute，p0.90:   8.144 us/op
                 execute，p0.95:   8.448 us/op
                 execute，p0.99:   15.984 us/op
                 execute，p0.999:  26.240 us/op
                 execute，p0.9999: 753.083 us/op
                 execute，p1.00:   9846.784 us/op

Iteration   5: 8.281 ＼(99.9%) 0.062 us/op
                 execute，p0.00:   7.240 us/op
                 execute，p0.50:   7.848 us/op
                 execute，p0.90:   8.144 us/op
                 execute，p0.95:   8.448 us/op
                 execute，p0.99:   15.984 us/op
                 execute，p0.999:  26.240 us/op
                 execute，p0.9999: 715.059 us/op
                 execute，p1.00:   2297.856 us/op



Result "talend.shenzetestJMH.TSwooshGroupingJMHTest.execute":
  N = 1505911
  mean =      8.334 ＼(99.9%) 0.087 us/op

  Histogram, us/op:
    [    0.000,  2500.000) = 1505909 
    [ 2500.000,  5000.000) = 0 
    [ 5000.000,  7500.000) = 0 
    [ 7500.000, 10000.000) = 1 
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 0 
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 

  Percentiles, us/op:
      p(0.0000) =      7.240 us/op
     p(50.0000) =      7.848 us/op
     p(90.0000) =      8.144 us/op
     p(95.0000) =      8.448 us/op
     p(99.0000) =     15.984 us/op
     p(99.9000) =     26.240 us/op
     p(99.9900) =    693.248 us/op
     p(99.9990) =    975.751 us/op
     p(99.9999) =  23114.715 us/op
    p(100.0000) =  36700.160 us/op


# Run complete. Total time: 00:01:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode      Cnt      Score   Error  Units
shenzetestJMH.TSwooshGroupingJMHTest.execute                  sample  1505911      8.334 ＼ 0.087  us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.00    sample               7.240          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.50    sample               7.848          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.90    sample               8.144          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.95    sample               8.448          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.99    sample              15.984          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.999   sample              26.240          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p0.9999  sample             693.248          us/op
shenzetestJMH.TSwooshGroupingJMHTest.execute:execute，p1.00    sample           36700.160          us/op
