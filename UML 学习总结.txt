类间关系
	依赖 -〉 (Dependency)
	继承 向上的实箭头(Association)
	实现 向上的虚箭头(Aggregation)
	关联 实线(Composition)
	
	依赖:依赖是一种最弱的★短期关系，依赖者往往要通过被依赖者初始化数据，或调用它的方法，之后往往就不再有联系。带箭头的虚线依赖者指向被依赖者。
      	     依赖显示一个类引用另一个类。依赖并不对关系的类增加属性，这是跟关联的主要区别。      再依赖中，因为一个类不是另一个的属性，所以实现中有三种方法。一是使用全局变量，二是使用本地变量，三是使用函数参数。
	     包之间也，可以存在依赖性。包A到包B的依赖性表示A中的某些类与B中的某些类有单向关系。


	关联:关联是一种长期的关系。一个对象★保存★另一个对象的引用，并在需要的时候调用它的方法。关联由两个类间的实线表示。
	     关联是类之间的词法连接，使一个类知道另一个类的公共属性和操作。关联可以是双向的，但尽量调整为单向，这样可以保证被使用的类可以复用。
	     关联中被使用的类（即被指向的类）一般是作为另一个的类属性。

	聚合:表示一个对象是一个更大整体的一部分。这个被包含的对象可能参与多个聚合关系，并向对于整体对象而独立存在。直线加由靠近整体一端加上空心菱形表示。

	组合:表明一个对象是被另一个更大的对象所拥有。可能不参与其他组合关系，并且不能独立存在。把聚合的菱形变成实心的。
	
提示:区分两者的好办法是否可以独立出来工作。

	导航性:一个类可以向另一个类发送消息，而另一个类不能向这个类发送消息。(这里的消息指一种控制信息)一般在前者的对象中有对后者对象的引用。实现箭头

	多重性:对象间的关联关系是如何对映的，一对多，多对多，多队，一对一。

	接口:
	
类图
	不依时间的变化。
	类
	接口
	协作
	依赖、泛化
    建立步骤:
		确定类-〉确定接口-〉确定两者之间的关系

顺序图:
	表达因时间顺序而发生的变化。
	顺序图要表现时间的先后顺序，所以会带有时间条。且这个时间条对应着该对象上的一个方法，在该时间条上的每个出箭头都是相应方法调用其它对象的方法的表示。
	在顺序图中的这些对象也是通过类名表现出来的，给类名前加上":"和下划线就表示相应类的对象实例了。如果对象实例有自己的名字，应该把名字写在冒号前。
   生命线:
		对象实例下对应的一条虚线，自上而下表示时间的先后顺序。
   运行期:
		在生命线上的矩形框，表示该对项处于运行期。
	

对象图
	是类图在某一时刻的状态
	
包图
	public '+'	private '-'	protected '#'	default ''	

动态视图
	交互图	时间和空间的顺序
	时序图 强调消息时间顺序
	协作图	强调参加交互的各对象组织
	状态图	

抽象:
	把一个复杂的对象抽象成我们所能理解的层次。但这种理解只是我们感受的，是对外部细节的之中忽略！

封装:
	把外表琐碎的事务通过各种技术实现连接好，使得我们指通过简单的操作完成里面复杂的任务。并且这样可以使我们以后对它的扩展更加容易！

对象:
	在UML中，对象用一个长方形和带下划线的名字来表示。

存取控制:
	在类或方法前面加上符号(+,-,#,'')就叫存取控制。





