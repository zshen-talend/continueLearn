<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tMysqlInput</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Enterprise"><link rel="up" href="Raa29876.html" title="Chapter&nbsp;6.&nbsp;Database components"><link rel="prev" href="tMysqlConnection.html" title="tMysqlConnection"><link rel="next" href="databases-tMysqlInvalidRows.html" title="tMysqlInvalidRows"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tMysqlInput"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tMysqlInput"></a>tMysqlInput</h2></div></div></div><p>
				<span class="inlinemediaobject"><img src="../images/tMysqlInput_icon32_white.png"></span>
			</p><div class="section" title="tMysqlInput properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e150924"></a>tMysqlInput properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p>
										<span class="bold"><strong>Component family</strong></span>
									</p>
								</td><td valign="top">
									<p>Databases/MySQL</p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tMysqlInput</strong></span> reads a
										database and extracts fields based on a query. </p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tMysqlInput</strong></span> executes a DB
										query with a strictly defined order which must correspond to
										the schema definition. Then it passes on the field list to
										the next component via a <span class="bold"><strong>Main</strong></span> row link.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Property type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: No property
										data stored centrally.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										repository file in which the properties are stored. The
										fields that follow are completed automatically using the
										data retrieved.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<div class="mediaobject"><img src="../images/Save_Icon.png"></div>
								</td><td valign="top">
									<p>Click this icon to open a database connection wizard and
										store the database connection parameters you set in the
										component <span class="bold"><strong>Basic settings
										</strong></span>view.</p>
									<p> For more information about setting up and storing
										database connection parameters, see <span class="bluebold">Talend Enterprise Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Use an existing connection</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box when using a configured <span class="bold"><strong>tMysqlConnection</strong></span>
										component.</p>
									<p> </p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>When a Job contains the parent Job and the child Job,
												<span class="bold"><strong>Component list</strong></span>
											presents only the connection components in the same Job
											level, so if you need to use an existing connection from
											the other level, make sure that the available connection
											components are sharing the intended connection.</p><p>For more information on how to share a DB connection
											across Job levels, see <span class="bold"><strong>Use or
												register a shared DB connection</strong></span> in any
											database connection component corresponding to the
											database you are using.</p><p>Otherwise, you can as well deactivate the connection
											components and use <span class="bold"><strong>Dynamic
												settings</strong></span> of the component to specify the
											intended connection manually. In this case, make sure
											the connection name is unique and distinctive all over
											through the two Job levels. For more information about
												<span class="bold"><strong>Dynamic settings</strong></span>,
											see your studio user guide.</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Host</em></span>
									</p>
								</td><td valign="top">
									<p>Database server IP address.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Port</em></span>
									</p>
								</td><td valign="top">
									<p>Listening port number of DB server.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Database</em></span>
									</p>
								</td><td valign="top">
									<p>Name of the database.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Username</em></span> and
											<span class="emphasis"><em>Password</em></span></p>
								</td><td valign="top">
									<p>DB user authentication data.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											Schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields to be processed and passed on to the next
										component. The schema is either <span class="bold"><strong>Built-in</strong></span> or stored remotely in the <span class="bold"><strong>Repository</strong></span>. </p>
									<p> </p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p><span>This component offers the advantage of the
												dynamic schema feature. This allows you to retrieve
												unknown columns from source files or to copy batches
												of columns from a source without map&shy;ping each
												column individually. For further information about
												dynamic schemas, see </span><span class="bluebold">Talend Enterprise Studio</span> User Guide.</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: The schema is
										created and stored locally for this component only. Related
										topic: see <span class="bluebold">Talend Enterprise Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: The schema
										already exists and is stored in the Repository, hence can be
										reused. Related topic: see <span class="bluebold">Talend Enterprise Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Table</em></span>
										<span class="emphasis"><em>Name</em></span>
									</p>
								</td><td valign="top">
									<p>Name of the table to be read.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Query type </em></span>and
											<span class="emphasis"><em>Query</em></span></p>
								</td><td valign="top">
									<p>Enter your DB query paying particularly attention to
										properly sequence the fields in order to match the schema
										definition. </p>
									<div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
											<span class="italic">If using the dynamic schema
												feature, the SELECT query must include the <span class="bold"><strong>*</strong></span> wildcard, to retrieve all
												of the columns from the table selected. </span>
										</p></td></tr></table></div>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Advanced settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Additional JDBC parameters</em></span>
									</p>
								</td><td valign="top">
									<p>Specify additional connection properties for the DB
										connection you are creating. This option is not available if
										you have selected the <span class="bold"><strong>Use an existing
											connection</strong></span> check box in the <span class="bold"><strong>Basic settings</strong></span>.</p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>When you need to handle data of the time-stamp type
												<span class="emphasis"><em>0000-00-00 00:00:00</em></span> using this
											component, set the parameter as:</p><p>
											<code class="code">noDatetimeStringSync=true&amp;zeroDa&shy;teTimeBehavior=convertToNull</code>.</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Enable stream</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to enables streaming over buffering
										which allows the code to read from a large table without
										consuming a large amount of memory in order to optimize the
										performance.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Trim all the String/Char columns</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to remove leading and trailing
										whitespace from all the String/Char columns.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Trim column</em></span>
									</p>
								</td><td valign="top">
									<p>Remove leading and trailing whitespace from defined
										columns.</p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>Clear <span class="bold"><strong>Trim all the String/Char
												columns</strong></span> to enable Trim columns in this
											field.</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>tStatCatcher Statistics</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to collect log data at the component
										level.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component covers all possible SQL queries for Mysql
										databases.</p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario 1: Writing columns from a MySQL database to an output file"><div class="titlepage"><div><div><h3 class="title"><a name="ychen-20111010-databases-writing_output"></a>Scenario 1: Writing columns from a MySQL database to an output file</h3></div></div></div><p>In this scenario we will read certain columns from a MySQL database, and then
					write them to a table in a local output file.</p><div class="section" title="Dragging and dropping components and linking them together"><div class="titlepage"><div><div><h4 class="title"><a name="d0e151481"></a>Dragging and dropping components and linking them together</h4></div></div></div><div class="procedure"><ol class="procedure" type="1"><li class="step" title="Step 1"><p> Drop <span class="bold"><strong>tMysqlInput</strong></span> and <span class="bold"><strong>tFileOutputDelimited</strong></span> from the <span class="bold"><strong>Palette</strong></span> onto the workspace.</p></li><li class="step" title="Step 2"><p> Link <span class="bold"><strong>tMysqlInput</strong></span> to <span class="bold"><strong>tFileOutputDelimited</strong></span> using a <span class="bold"><strong>Row &gt; Main</strong></span> connection.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_1.png"></div></li></ol></div></div><div class="section" title="Configuring the components"><div class="titlepage"><div><div><h4 class="title"><a name="d0e151512"></a>Configuring the components</h4></div></div></div><div class="procedure"><ol class="procedure" type="1"><li class="step" title="Step 1"><p> Double-click <span class="bold"><strong>tMysqlInput</strong></span> to open
								its <span class="bold"><strong>Basic Settings</strong></span> view in the
									<span class="bold"><strong>Component</strong></span> tab.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_2.png"></div></li><li class="step" title="Step 2"><p> From the <span class="bold"><strong>Property Type</strong></span> list,
								select <span class="bold"><strong>Repository</strong></span> if you have
								already stored the connection to database in the <span class="bold"><strong>Metadata</strong></span> node of the <span class="bold"><strong>Repository</strong></span> tree view. The property fields
								that follow are automatically filled in.</p><p>For more information about how to store a database connection, see
								the <span class="bluebold">Talend Enterprise Studio</span>
								<span class="bold"><strong>User Guide</strong></span>. </p><p> If you have not defined the database connection locally in the
									<span class="bold"><strong>Repository</strong></span>, fill in the details
								manually after selecting <span class="bold"><strong>Built-in</strong></span>
								from the <span class="bold"><strong>Property Type</strong></span> list.</p></li><li class="step" title="Step 3"><p> Set the <span class="bold"><strong>Schema </strong></span>as<span class="bold"><strong> Built-in</strong></span> and click <span class="bold"><strong>Edit schema</strong></span> to define the desired schema.</p><p> The schema editor opens:</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_3.png"></div></li><li class="step" title="Step 4"><p> Click the <span class="inlinemediaobject"><img src="../images/plus_button.png"></span> button to add the rows that you will use to
								define the schema, four columns in this example
									<span class="emphasis"><em>id</em></span>, <span class="emphasis"><em>first_name</em></span>,
									<span class="emphasis"><em>city</em></span> and
								<span class="emphasis"><em>salary</em></span>.</p><p> Under <span class="bold"><strong>Column</strong></span>, click in the
								fields to enter the corresponding column names. </p><p> Click the field under <span class="bold"><strong>Type</strong></span> to
								define the type of data.</p><p> Click <span class="bold"><strong>OK</strong></span> to close the schema
								editor.</p></li><li class="step" title="Step 5"><p> Next to the <span class="bold"><strong>Table Name</strong></span> field,
								click the<span class="bold"><strong> [...]</strong></span> button to select
								the database table of interest.</p><p> A dialog box displays a tree diagram of all the tables in the
								selected database:</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_4.png"></div></li><li class="step" title="Step 6"><p> Click the table of interest and then click <span class="bold"><strong>OK</strong></span> to close the dialog box.</p></li><li class="step" title="Step 7"><p> Set the<span class="bold"><strong> Query Type</strong></span> as <span class="bold"><strong>Built-In</strong></span>. </p></li><li class="step" title="Step 8"><p> In the <span class="bold"><strong>Query</strong></span> box, enter the
								query required to retrieve the desired columns from the
								table.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_5.png"></div></li><li class="step" title="Step 9"><p> Double-click <span class="bold"><strong>tFileOutputDelimited</strong></span> to set its <span class="bold"><strong>Basic Settings</strong></span> in the <span class="bold"><strong>Component</strong></span> tab.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_6.png"></div></li><li class="step" title="Step 10"><p> Next to the <span class="bold"><strong>File Name</strong></span> field,
								click the <span class="bold"><strong>[...]</strong></span> button to browse
								your directory to where you want to save the output file, then enter
								a name for the file.</p><p> Select the <span class="bold"><strong>Include Header</strong></span> check
								box to retrieve the column names as well as the data.</p></li><li class="step" title="Step 11"><p> Save the Job.</p></li></ol></div></div><div class="section" title="Executing the Job"><div class="titlepage"><div><div><h4 class="title"><a name="d0e151687"></a>Executing the Job</h4></div></div></div><p>The results below can be found after <span class="bold"><strong>F6</strong></span>
						is pressed to run the Job.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_7.png"></div><p>As shown above, the output file is written with the desired column names
						and corresponding data, retrieved from the database:</p><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>The Job can also be run in the <span class="bold"><strong>Traces
								Debug</strong></span> mode, which allows you to view the rows as they are
							being written to the output file, in the workspace.</p></td></tr></table></div></div></div><div class="section" title="Scenario 2: Using context parameters when reading a table from a MySQL database"><div class="titlepage"><div><div><h3 class="title"><a name="d0e151706"></a>Scenario 2: Using context parameters when reading a table from a MySQL
					database </h3></div></div></div><p>In this scenario, we will read a table from a MySQL database, using a context
					parameter to refer to the table name.</p><div class="section" title="Dragging and dropping components and linking them together"><div class="titlepage"><div><div><h4 class="title"><a name="d0e151711"></a>Dragging and dropping components and linking them together</h4></div></div></div><div class="procedure"><ol class="procedure" type="1"><li class="step" title="Step 1"><p> Drop <span class="bold"><strong>tMysqlInput</strong></span> and <span class="bold"><strong>tLogRow</strong></span> from the <span class="bold"><strong>Palette</strong></span> onto the workspace.</p></li><li class="step" title="Step 2"><p> Link <span class="bold"><strong>tMysqlInput</strong></span> to <span class="bold"><strong>tLogRow</strong></span> using a <span class="bold"><strong>Row
									&gt; Main</strong></span> connection.</p><div class="mediaobject"><img src="../images/use_case_tmysqlinput_context_1.png"></div></li></ol></div></div><div class="section" title="Configuring the components"><div class="titlepage"><div><div><h4 class="title"><a name="d0e151742"></a>Configuring the components</h4></div></div></div><div class="procedure"><ol class="procedure" type="1"><li class="step" title="Step 1"><p> Double-click <span class="bold"><strong>tMysqlInput</strong></span> to open
								its <span class="bold"><strong>Basic Settings</strong></span> view in the
									<span class="bold"><strong>Component</strong></span> tab.</p><div class="mediaobject"><img src="../images/use_case_tmysqlinput_context_2.png"></div></li><li class="step" title="Step 2"><p> From the <span class="bold"><strong>Property Type</strong></span> list,
								select <span class="bold"><strong>Repository</strong></span> if you have
								already stored the connection to database in the <span class="bold"><strong>Metadata</strong></span> node of the <span class="bold"><strong>Repository</strong></span> tree view. The property fields
								that follow are automatically filled in.</p><p>For more information about how to store a database connection, see
								the <span class="bluebold">Talend Enterprise Studio</span>
								<span class="bold"><strong>User Guide</strong></span>. </p><p> If you have not defined the database connection in the <span class="bold"><strong>Repository</strong></span>, fill in the details manually
								after selecting <span class="bold"><strong>Built-in</strong></span> from the
									<span class="bold"><strong>Property Type</strong></span> list.</p></li><li class="step" title="Step 3"><p> Set the <span class="bold"><strong>Schema</strong></span> as <span class="bold"><strong>Built-In</strong></span> and click <span class="bold"><strong>Edit schema</strong></span> to define the desired schema.</p><p> The schema editor opens:</p><div class="mediaobject"><img src="../images/use_case_tmysqlinput_context_3.png"></div></li><li class="step" title="Step 4"><p> Click the <span class="inlinemediaobject"><img src="../images/plus_button.png"></span> button to add the rows that you will use to
								define the schema, seven columns in this example:
									<span class="emphasis"><em>id</em></span>, <span class="emphasis"><em>first_name</em></span>,
									<span class="italic">last_name</span>,
									<span class="emphasis"><em>city</em></span>, <span class="italic">state</span>, <span class="italic">date_of_birth</span> and
								<span class="emphasis"><em>salary</em></span>.</p><p> Under <span class="bold"><strong>Column</strong></span>, click the fields
								to enter the corresponding column names. </p><p> Click the fields under <span class="bold"><strong>Type</strong></span> to
								define the type of data.</p><p> Click <span class="bold"><strong>OK</strong></span> to close the schema
								editor.</p></li><li class="step" title="Step 5"><p> Put the cursor in the <span class="bold"><strong>Table Name</strong></span>
								field and press <span class="bold"><strong>F5</strong></span> for context
								parameter setting. </p><div class="mediaobject"><img src="../images/use_case_tmysqlinput_context_4.png"></div><p>For more information about context settings, see the <span class="bluebold">Talend Enterprise Studio</span>
								<span class="bold"><strong>User Guide</strong></span>.</p></li><li class="step" title="Step 6"><p>Keep the default setting in the <span class="bold"><strong>Name</strong></span> field and type in the name of the database
								table in the <span class="bold"><strong>Default value</strong></span> field,
									<span class="italic">employees</span> in this case.
							</p></li><li class="step" title="Step 7"><p>Click <span class="bold"><strong>Finish</strong></span> to validate the
								setting. </p><p>The context parameter <span class="italic">context.TABLE</span> automatically appears in the <span class="bold"><strong>Table Name</strong></span> field.</p></li><li class="step" title="Step 8"><p>In the <span class="bold"><strong>Query type</strong></span> list, select
									<span class="bold"><strong>Built-In</strong></span>. Then, click <span class="bold"><strong>Guess Query</strong></span> to get the query statement. </p><p>In this use case, we want to read the records with the salary
								above 8000. Therefore, we add a <code class="code">Where</code> clause and the
								final query statement is as follows:</p><pre class="programlisting">"SELECT 
  "+context.TABLE+".`id`, 
  "+context.TABLE+".`first_name`, 
  "+context.TABLE+".`last_name`, 
  "+context.TABLE+".`city`, 
  "+context.TABLE+".`state`, 
  "+context.TABLE+".`date_of_birth`, 
  "+context.TABLE+".`salary`
FROM "+context.TABLE+"
WHERE
  "+context.TABLE+".`salary` &gt; 8000"</pre></li><li class="step" title="Step 9"><p> Double-click <span class="bold"><strong>tLogRow</strong></span> to set its
									<span class="bold"><strong>Basic Settings</strong></span> in the <span class="bold"><strong>Component</strong></span> tab.</p><div class="mediaobject"><img src="../images/use_case_tmysqlinput_context_5.png"></div></li><li class="step" title="Step 10"><p>In the <span class="bold"><strong>Mode</strong></span> area, select
									<span class="bold"><strong>Table (print values in cells of a
									table)</strong></span> for a better display of the results.</p></li><li class="step" title="Step 11"><p>Save the Job.</p></li></ol></div></div><div class="section" title="Executing the Job"><div class="titlepage"><div><div><h4 class="title"><a name="d0e151949"></a>Executing the Job</h4></div></div></div><p>The results below can be found after <span class="bold"><strong>F6</strong></span>
						is pressed to run the Job.</p><div class="mediaobject"><img src="../images/use_case_tmysqlinput_context_6.png"></div><p>As shown above, the records with the salary greater than 8000 are
						retrieved.</p></div></div><div class="section" title="Scenario 3: Writing dynamic columns from a MySQL database to an output file"><div class="titlepage"><div><div><h3 class="title"><a name="Raa58493"></a>Scenario 3: Writing dynamic columns from a MySQL database to an output
					file</h3></div></div></div><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
						<span class="italic"> The Dynamic Schema feature is only functional in
								Talend Enterprise Studio. You can reproduce this scenario only if you are
							using any edition of Talend Enterprise Studio.</span>
					</p></td></tr></table></div><p>In this scenario we will read dynamic columns from a MySQL database, map them
					and then write them to a table in a local output file. By defining a dynamic
					column alongside known column names, we can retrieve all of the columns from the
					database table, including the unknown columns.</p><div class="section" title="Dragging and dropping components and linking them together"><div class="titlepage"><div><div><h4 class="title"><a name="d0e151979"></a>Dragging and dropping components and linking them together</h4></div></div></div><div class="procedure"><ol class="procedure" type="1"><li class="step" title="Step 1"><p> Drop a <span class="bold"><strong>tMysqlInput</strong></span>, a <span class="bold"><strong>tMap</strong></span> and a <span class="bold"><strong>tFileOutputDelimited</strong></span> component onto the
								workspace.</p></li><li class="step" title="Step 2"><p> Link <span class="bold"><strong>tMysqlInput</strong></span> to <span class="bold"><strong>tMap</strong></span> using a <span class="bold"><strong>Row
									&gt; Main</strong></span> connection.</p></li><li class="step" title="Step 3"><p> Link <span class="bold"><strong>tMap</strong></span> to <span class="bold"><strong>tFileOutputDelimited</strong></span> using a <span class="bold"><strong>Row &gt; *New Output* (Main)</strong></span>
								connection.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_1.png"></div></li></ol></div></div><div class="section" title="Configuring the components"><div class="titlepage"><div><div><h4 class="title"><a name="d0e152022"></a>Configuring the components</h4></div></div></div><div class="procedure" title="Procedure&nbsp;6.1.&nbsp;Data source and dynamic columns"><a name="d0e152025"></a><p class="title"><b>Procedure&nbsp;6.1.&nbsp;Data source and dynamic columns </b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p> Double-click <span class="bold"><strong>tMysqlInput</strong></span> to open
								its <span class="bold"><strong>Basic Settings</strong></span> view in the
									<span class="bold"><strong>Component</strong></span> tab.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_2.png"></div><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
									<span class="italic">The dynamic schema feature is only
										supported in <span class="bold"><strong>Built-In</strong></span>
										mode.</span>
								</p></td></tr></table></div></li><li class="step" title="Step 2"><p> Select <span class="bold"><strong>Built-in</strong></span> as the <span class="bold"><strong>Property Type</strong></span>.</p><p> Select the <span class="bold"><strong>DB Version</strong></span> from the
								corresponding list.</p><p> Next to <span class="bold"><strong>Host</strong></span>, enter the database
								server IP address.</p><p> Next to <span class="bold"><strong>Port</strong></span>, enter the
								listening port number of the database server.</p><p> Enter your authentication data in the <span class="bold"><strong>Username</strong></span> and <span class="bold"><strong>Password</strong></span> fields.</p></li><li class="step" title="Step 3"><p> Set the <span class="bold"><strong>Schema type</strong></span> as<span class="bold"><strong> Built-in</strong></span> and click <span class="bold"><strong>Edit schema</strong></span> to define the dynamic schema.</p><p> The schema editor opens:</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_3.png"></div></li><li class="step" title="Step 4"><p> Click the <span class="inlinemediaobject"><img src="../images/plus_button.png"></span> button to add a row to the schema.</p><p> Under <span class="bold"><strong>Column</strong></span> and<span class="bold"><strong> Db Column</strong></span>, click in the fields to enter
								the corresponding column names. </p><p> Click the field under <span class="bold"><strong>Type</strong></span> to
								define the type of data.</p><p> Click the arrow and select <span class="bold"><strong>Dynamic</strong></span> from the list.</p><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
									<span class="italic"> Under <span class="bold"><strong>Type</strong></span>, the dynamic column type must be set as
											<span class="bold"><strong>Dynamic</strong></span>.</span>
								</p></td></tr></table></div></li><li class="step" title="Step 5"><p> Click <span class="bold"><strong>OK</strong></span> to close the schema
								editor.</p></li><li class="step" title="Step 6"><p> Next to the <span class="bold"><strong>Table Name</strong></span> field,
								click the<span class="bold"><strong> [...]</strong></span> button to select
								the database table of interest.</p><p> A dialog box displays a tree diagram of all the tables in the
								selected database:</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_4.png"></div><p> Click the table of interest and then click <span class="bold"><strong>OK</strong></span> to close the dialog box.</p></li><li class="step" title="Step 7"><p> Set the<span class="bold"><strong> Query Type</strong></span> as <span class="bold"><strong>Built-In</strong></span>. </p><p> In the <span class="bold"><strong>Query</strong></span> box, enter the
								query required to retrieve all of the columns from the table.</p><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
									<span class="italic"> In the SELECT statement it is necessary
										to use the <span class="bold"><strong>*</strong></span> wildcard
										character, to retrieve all of the columns from the selected
										table.</span>
								</p></td></tr></table></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_5.png"></div></li><li class="step" title="Step 8"><p> Click <span class="bold"><strong>tMap</strong></span> to open its <span class="bold"><strong>Basic Settings</strong></span> view in the <span class="bold"><strong>Component</strong></span> tab. </p></li><li class="step" title="Step 9"><p> Click <span class="bold"><strong>[...]</strong></span> next to <span class="bold"><strong>Map Editor</strong></span> to map the column from the
								source file.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_6.png"></div></li><li class="step" title="Step 10"><p> Drop the column defined as dynamic from the input schema on the
								left onto the output schema on the right.</p><p> The column dropped on the output schema retains its original
								values.</p><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
									<span class="emphasis"><em>The dynamic column must be mapped on a one to one
										basis and cannot undergo any transformations. It cannot be
										used in a filter expression or in a variables section. It
										cannot be renamed in the output table and cannot be used as
										a join condition.</em></span>
								</p></td></tr></table></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_7.png"></div></li><li class="step" title="Step 11"><p> Click <span class="bold"><strong>OK</strong></span> to close the <span class="bold"><strong>Map Editor</strong></span>.</p></li></ol></div><div class="procedure" title="Procedure&nbsp;6.2.&nbsp;Output file"><a name="d0e152236"></a><p class="title"><b>Procedure&nbsp;6.2.&nbsp;Output file</b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p> Double-click <span class="bold"><strong>tFileOutputDelimited</strong></span> to set its <span class="bold"><strong>Basic Settings</strong></span> in the <span class="bold"><strong>Component</strong></span> tab.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_8.png"></div></li><li class="step" title="Step 2"><p> Next to the <span class="bold"><strong>File Name</strong></span> field,
								click the <span class="bold"><strong>[...]</strong></span> button to browse
								your directory to where you want to save the output file, then enter
								a name for the file.</p></li><li class="step" title="Step 3"><p> Select the <span class="bold"><strong>Include Header</strong></span> check
								box to retrieve the column names as well as the data.</p></li><li class="step" title="Step 4"><p> Save the Job.</p></li></ol></div></div><div class="section" title="Executing the Job"><div class="titlepage"><div><div><h4 class="title"><a name="d0e152272"></a>Executing the Job</h4></div></div></div><p>The results below can be found after <span class="bold"><strong>F6</strong></span>
						is pressed to run the Job.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlInput_Dynamic_Schema_9.png"></div><p>As shown above, the output file is written with all the column names and
						corresponding data, retrieved from the database via the dynamic
						schema:</p><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p> The Job can also be run in the <span class="bold"><strong>Traces
								Debug</strong></span> mode, which allows you to view the rows as they are
							written to the output file, in the workspace.</p><p> </p></td></tr></table></div><p>For further information about defining and mapping dynamic schemas, see
						the <span class="bluebold">Talend Enterprise Studio</span>
						<span class="bold"><strong>User Guide</strong></span>.</p></div><div class="section" title="Related scenarios"><div class="titlepage"><div><div><h4 class="title"><a name="d0e152302"></a>Related scenarios</h4></div></div></div><p>For related scenarios, see:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>
								<a class="xref" href="tContextLoad.html#Raa15947" title="Scenario: Dynamic context use in MySQL DB insert">the section called &#8220;Scenario: Dynamic context use in MySQL DB insert&#8221;</a>.</p></li><li class="listitem"><p>
								<a class="xref" href="tDBInput.html#Raa95556" title="Scenario 1: Displaying selected data from DB table">the section called &#8220;Scenario 1: Displaying selected data from DB table&#8221;</a>.</p></li><li class="listitem"><p>
								<a class="xref" href="tDBInput.html#Raa80338" title="Scenario 2: Using StoreSQLQuery variable">the section called &#8220;Scenario 2: Using StoreSQLQuery variable&#8221;</a>.</p></li><li class="listitem"><p>
								<a class="xref" href="tMysqlOutput.html#Raa52976" title="Scenario 4: Writing dynamic columns from a source file to a MySQL database">the section called &#8220;Scenario 4: Writing dynamic columns from a source file to a MySQL
					database&#8221;</a>.</p></li></ul></div></div></div></div></body></html>