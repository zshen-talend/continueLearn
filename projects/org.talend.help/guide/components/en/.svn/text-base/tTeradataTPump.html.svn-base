<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tTeradataTPump</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Open Studio"><link rel="up" href="Raa29876.html" title="Chapter&nbsp;6.&nbsp;Database components"><link rel="prev" href="tTeradataTPTUtility.html" title="tTeradataTPTUtility"><link rel="next" href="tVectorWiseCommit.html" title="tVectorWiseCommit"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tTeradataTPump"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tTeradataTPump"></a>tTeradataTPump</h2></div></div></div><div class="mediaobject"><img src="../images/tTeradataTPump_icon32_white.png"></div><a name="Xaa2948017"></a><div class="section" title="tTeradataTPump Properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e165483"></a>tTeradataTPump Properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p>
										<span class="bold"><strong>Component Family</strong></span>
									</p>
								</td><td valign="top">
									<p>Databases/Teradata </p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tTeradataTPump </strong></span>reads a
										database and extracts fields using queries.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tTeradataTPump</strong></span> executes a
										database query according to a strict order which must be the
										same as the one in the schema. The retrieve list of fields
										is then transfered to the next component, using a connexion
										flow (<span class="bold"><strong>Main row</strong></span>). </p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Property type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: No property
										data stored centrally.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										repository file in which the properties are stored. The
										fields that follow are completed automatically using the
										data retrieved.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Execution platform</em></span>
									</p>
								</td><td valign="top">
									<p>Select the Operating System type you use.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Database</em></span>
										<span class="emphasis"><em>name</em></span>
									</p>
								</td><td valign="top">
									<p>Database name.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Username</em></span> and
											<span class="emphasis"><em>Password</em></span></p>
								</td><td valign="top">
									<p>DB user authentication data.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Table</em></span>
									</p>
								</td><td valign="top">
									<p>Name of the table to be written. Note that only one table
										can be written at a time.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											Schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields to be processed and passed on to the next
										component. The schema is either <span class="bold"><strong>Built-in</strong></span> or stored remotely in the <span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: The schema is
										created and stored locally for this component only. Related
										topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: The schema
										already exists and is stored in the Repository, hence can be
										reused. Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Script generated folder</em></span>
									</p>
								</td><td valign="top">
									<p>Browse your directory and select the destination of the
										file which will be created.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Action to data</em></span>
									</p>
								</td><td valign="top">
									<p>On the data of the table defined, you can perform:</p>
									<p>
										<span class="bold"><strong>Insert</strong></span>: Add new entries to
										the table. If duplicates are found, job stops.</p>
									<p>
										<span class="bold"><strong>Update</strong></span>: Make changes to
										existing entries</p>
									<p>
										<span class="bold"><strong>Insert or update</strong></span>: Add
										entries or update existing ones.</p>
									<p>
										<span class="bold"><strong>Delete</strong></span>: Remove entries
										corresponding to the input flow.</p>
									<div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
											<span class="italic">It is necessary to specify at
												least one column as a primary key on which the
												Update and Delete operations are based. You can do
												that by clicking <span class="bold"><strong>Edit
												Schema</strong></span> and selecting the check box(es)
												next to the column(s) you want to set as primary
												key(s).</span>
										</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Where condition in case Delete</em></span>
									</p>
								</td><td valign="top">
									<p>Type in a condition, which, once verified, will delete the
										row.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Load file</em></span>
									</p>
								</td><td valign="top">
									<p>Browse your directory and select the file from which you
										want to load data.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Field separator</em></span>
									</p>
								</td><td valign="top">
									<p>Character, string or regular expression to separate
										fields. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Error file</em></span>
									</p>
								</td><td valign="top">
									<p>Browse your directory and select the destination of the
										file where the error messages will be recorded.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Advanced settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Define Log table</em></span>
									</p>
								</td><td valign="top">
									<p>This check box is selected to define a log table you want
										to use in place of the default one that is the database
										table you defined in <span class="bold"><strong>Basic
											settings</strong></span>. The syntax required to define the
										log table is
										<span class="emphasis"><em>databasename.logtablename</em></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>BEGIN LOAD</em></span>
									</p>
								</td><td valign="top">
									<p>This field allows you to define your BEGIN LOAD command to
										initiate or restart a TPump task. You can specify the number
										of sessions to use, the error limit and any other parameters
										needed to execute the task. The default value is:</p>
									<p>
										<code class="code">SESSIONS 8 PACK 600 ARRAYSUPPORT ON CHECKPOINT 60
											TENACITY 2 ERRLIMIT 1000.</code>
									</p>
									<p>For more information, see <span class="emphasis"><em>Teradata Parallel Data
											Pump Reference</em></span> documentation.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Return tpump error</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to specify the exit code number to
										indicate the point at which an error message should display
										in the console.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Define character set</em></span>
									</p>
								</td><td valign="top">
									<p>Specify the character encoding you need use for your
										system</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>tStat</em></span>
										<span class="emphasis"><em>Catcher Statistics</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to collect log data at the component
										level.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component offers the flexibility of the DB query and
										covers all possible SQL queries.</p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario: Inserting data into a Teradata database table"><div class="titlepage"><div><div><h3 class="title"><a name="Raa51052"></a>Scenario: Inserting data into a Teradata database table</h3></div></div></div><p>In this scenario, you create a Job using <span class="bold"><strong>tTeradataTPump</strong></span> to insert customer data into a Teradata database
					table and specify the exit code to be displayed in the event of an exception
					error.</p><p>Three components are used in this Job:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p><span class="bold"><strong> tRowGenerator</strong></span>: generates rows as
							required using random customer data taken from a list.</p></li><li class="listitem"><p><span class="bold"><strong> tFileOutputDelimited</strong></span>: outputs the
							customer data into a delimited file.</p></li><li class="listitem"><p><span class="bold"><strong> tTeradataTPump</strong></span>: inserts the customer
							data into the Teradata database table in the Tpump mode.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tTeradataTpump1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Drop the required components: <span class="bold"><strong>tRowGenerator</strong></span>, <span class="bold"><strong>tFileOutputDelimited</strong></span> and <span class="bold"><strong>tTeradataTPump</strong></span> from the <span class="bold"><strong>Palette</strong></span> onto the design workspace.</p></li><li class="listitem"><p> Link <span class="bold"><strong>tRowGenerator</strong></span> to <span class="bold"><strong>tFileOutputDelimited</strong></span> using a <span class="bold"><strong>Row</strong></span> &gt; <span class="bold"><strong>Main</strong></span> connection.</p></li><li class="listitem"><p> Link <span class="bold"><strong>tRowGenerator</strong></span> to <span class="bold"><strong>tTeradataTPump</strong></span> using a <span class="bold"><strong>Trigger</strong></span> &gt; <span class="bold"><strong>On
								SubjobOk</strong></span> connection.</p></li><li class="listitem"><p> Double click <span class="bold"><strong>tRowGenerator</strong></span> to open
							the <span class="bold"><strong>tRowGenerator Editor</strong></span> window.</p></li><li class="listitem"><p> In the <span class="bold"><strong>tRowGenerator Editor</strong></span> window,
							define the data to be generated. For this Job, the schema is composed of
							two columns: <span class="emphasis"><em>ID</em></span> and
							<span class="emphasis"><em>Name</em></span>.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tTeradataTpump2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Enter the <span class="bold"><strong>Number of Rows for
								RowGenerator</strong></span> to generate.</p></li><li class="listitem"><p> Double click t<span class="bold"><strong>FileOutputDelimited</strong></span> to
							define its properties in the <span class="bold"><strong>Component</strong></span>
							view.</p></li><li class="listitem"><p> Next to <span class="bold"><strong>File Name</strong></span>, browse to the
							output file or enter a name for the output file to be created.</p></li><li class="listitem"><p> Between double quotation marks, enter the delimiters to be used next
							to <span class="bold"><strong>Row Separator</strong></span> and <span class="bold"><strong>Field Separator</strong></span>.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tTeradataTpump3.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Click <span class="bold"><strong>Edit schema</strong></span> and check that the
							schema matches the input schema. If need be, click <span class="bold"><strong>Sync Columns</strong></span>.</p></li><li class="listitem"><p> Double click <span class="bold"><strong>tTeradataTPump</strong></span> to open
							its <span class="bold"><strong>Component</strong></span> view.</p></li><li class="listitem"><p> In the <span class="bold"><strong>Basic settings</strong></span> tab of the
								<span class="bold"><strong>Component</strong></span> view, define the
								<span class="bold"><strong>tTeradataTPump</strong></span> parameters. I</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tTeradataTpump4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Enter the <span class="bold"><strong>Database name</strong></span>, <span class="bold"><strong>User name</strong></span> and <span class="bold"><strong>Password</strong></span> in accordance with your database authentication
							information.</p></li><li class="listitem"><p> Specify the <span class="bold"><strong>Table </strong></span>into which you
							want to insert the customer data. In this scenario, it is called
								<span class="emphasis"><em>mytable</em></span>.</p></li><li class="listitem"><p> In the <span class="bold"><strong>Script generated folder</strong></span>
							field, browse to the folder in which you want to store the script files
							generated.</p></li><li class="listitem"><p> In the <span class="bold"><strong>Load file</strong></span> field, browse to
							the file which contains the customer data.</p></li><li class="listitem"><p> In the <span class="bold"><strong>Error file</strong></span> field, browse to
							the file in which you want to log the error information.</p></li><li class="listitem"><p> In the <span class="bold"><strong>Action on data</strong></span> field, select
								<span class="bold"><strong>Insert</strong></span>.</p></li><li class="listitem"><p> Press <span class="bold"><strong>F6</strong></span> to execute the Job.</p></li><li class="listitem"><p> The <span class="bold"><strong>Run</strong></span> view console reads as
							follows:</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tTeradataTpump5.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Double-click the <span class="bold"><strong>tTeradataTPump</strong></span>
							component to go back to its <span class="bold"><strong>Component</strong></span>
							view.</p></li><li class="listitem"><p> On the <span class="bold"><strong>Advanced settings</strong></span> tab, select
							the <span class="bold"><strong>Return tpump error</strong></span> check box and
							type in the exit code number to indicate the point at which an error
							message should be displayed in the console. In this example, enter the
							number <span class="emphasis"><em>4</em></span> and use the default values for the other
							parameters.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tTeradataTpump6.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Press <span class="bold"><strong>F6</strong></span> to run the Job.</p></li><li class="listitem"><p> The <span class="bold"><strong>Run</strong></span> view console reads as
							follows:</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tTeradataTpump7.png"></div><p>An exception error occurs and <code class="code">TPump returned exit code 12</code> is
					displayed. If you need to view detailed information about the exception error,
					you can open the log file stored in the directory you specified in the <span class="bold"><strong>Error file</strong></span> field in the <span class="bold"><strong>Basic
						settings</strong></span> tab of the <span class="bold"><strong>Component</strong></span>
					view.</p></div></div></body></html>