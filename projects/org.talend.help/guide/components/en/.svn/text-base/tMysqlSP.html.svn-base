<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tMysqlSP</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Open Studio"><link rel="up" href="Raa29876.html" title="Chapter&nbsp;6.&nbsp;Database components"><link rel="prev" href="databases-tMysqlSCDELT.html" title="tMysqlSCDELT"><link rel="next" href="tMysqlTableList.html" title="tMysqlTableList"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tMysqlSP"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tMysqlSP"></a>tMysqlSP</h2></div></div></div><div class="mediaobject"><img src="../images/tMysqlSP_icon32_white.png"></div><div class="section" title="tMysqlSP Properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e122222"></a>tMysqlSP Properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p>
										<span class="bold"><strong>Component family</strong></span>
									</p>
								</td><td valign="top">
									<p>Databases/Mysql</p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tMysqlSP</strong></span> calls the
										database stored procedure.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tMysqlSP</strong></span> offers a
										convenient way to centralize multiple or complex queries in
										a database and call them easily.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Property type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: No property
										data stored centrally.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										repository file in which the properties are stored. The
										fields that follow are completed automatically using the
										data retrieved.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Host</em></span>
									</p>
								</td><td valign="top">
									<p>Database server IP address</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Port</em></span>
									</p>
								</td><td valign="top">
									<p>Listening port number of DB server.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Database</em></span>
									</p>
								</td><td valign="top">
									<p>Name of the database</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Username</em></span> and
											<span class="emphasis"><em>Password</em></span></p>
								</td><td valign="top">
									<p>DB user authentication data.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											Schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields to be processed and passed on to the next
										component. The schema is either <span class="bold"><strong>Built-in</strong></span> or stored remotely in the <span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: The schema is
										created and stored locally for this component only. Related
										topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: The schema
										already exists and is stored in the Repository, hence can be
										reused. Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>SP Name</em></span>
									</p>
								</td><td valign="top">
									<p>Type in the exact name of the Stored Procedure</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Is Function</em></span> /<span class="emphasis"><em> Return result
											in</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box, if a value only is to be returned. </p>
									<p> Select on the list the schema column, the value to be
										returned is based on.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Parameters</em></span>
									</p>
								</td><td valign="top">
									<p>Click the Plus button and select the various <span class="bold"><strong>Schema Columns</strong></span> that will be
										required by the procedures. Note that the SP schema can hold
										more columns than there are paramaters used in the
										procedure.</p>
									<p> Select the <span class="bold"><strong>Type</strong></span> of
										parameter:</p>
									<p>
										<span class="bold"><strong>IN</strong></span>: Input parameter</p>
									<p>
										<span class="bold"><strong>OUT</strong></span>: Output
										parameter/return value</p>
									<p>
										<span class="bold"><strong>IN OUT</strong></span>: Input parameters is
										to be returned as value, likely after modification through
										the procedure (function).</p>
									<p>
										<span class="bold"><strong>RECORDSET</strong></span>: Input parameters
										is to be returned as a set of values, rather than single
										value.</p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>Check the <span class="bold"><strong>tPostgresqlCommit</strong></span> component if you want
											to analyze a set of records from a database table or DB
											query and return single records.</p></td></tr></table></div>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component is used as intermediary component. It can
										be used as start component but only input parameters are
										thus allowed. </p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Limitation</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>The Stored Procedures syntax should match the Database
										syntax. </p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario: Finding a State Label using a stored procedure"><div class="titlepage"><div><div><h3 class="title"><a name="Raa51224-dup-2"></a>Scenario: Finding a State Label using a stored procedure</h3></div></div></div><p>The following job aims at finding the State labels matching the odd State IDs
					in a Mysql two-column table. A stored procedure is used to carry out this
					operation. </p><div class="mediaobject"><img src="../images/Use_Case_tMysqlSP1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Drag and drop the following components used in this example:
								<span class="bold"><strong>tRowGenerator</strong></span>, <span class="bold"><strong>tMysqlSP</strong></span>, <span class="bold"><strong>tLogRow</strong></span>.</p></li><li class="listitem"><p> Connect the components using the <span class="bold"><strong>Row Main
							</strong></span>link.</p></li><li class="listitem"><p> The <span class="bold"><strong>tRowGenerator</strong></span> is used to
							generate the odd id number. Double-click on the component to launch the
							editor.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlSP2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Click on the <span class="bold"><strong>Plus</strong></span> button to add a
							column to the schema to generate.</p></li><li class="listitem"><p> Select the <span class="bold"><strong>Key</strong></span> check box and define
							the <span class="bold"><strong>Type</strong></span> to <span class="bold"><strong>Int</strong></span>. </p></li><li class="listitem"><p> The <span class="bold"><strong>Length</strong></span> equals to 2 digits
							max.</p></li><li class="listitem"><p> Use the preset function called <span class="bold"><strong>sequence</strong></span> but customize the Parameters in the lower part
							of the window.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlSP2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Change the <span class="bold"><strong>Value</strong></span> of <span class="bold"><strong>step</strong></span> from <span class="emphasis"><em>1 </em></span>to
								<span class="emphasis"><em>2 </em></span>for this example, still starting from
							1.</p></li><li class="listitem"><p> Set the <span class="bold"><strong>Number of generated rows</strong></span> to
							25 in order for all the odd State id (of 50 states) to be
							generated.</p></li><li class="listitem"><p> Click <span class="bold"><strong>OK</strong></span> to validate the
							configuration.</p></li><li class="listitem"><p> Then select the <span class="bold"><strong>tMysqlSP</strong></span> component
							and define its properties.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlSP3.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Set the <span class="bold"><strong>Property type </strong></span>field to
								<span class="bold"><strong>Repository</strong></span> and select the relevant
							entry on the list. The connection details get filled in
							automatically.</p></li><li class="listitem"><p> Else, set manually the connection information.</p></li><li class="listitem"><p> Click <span class="bold"><strong>Sync Column</strong></span> to retrieve the
							generated schema from the preceding component. </p></li><li class="listitem"><p> Then click <span class="bold"><strong>Edit Schema</strong></span> and add an
							extra column to hold the State Label to be output, in addition to the
							ID.</p></li><li class="listitem"><p> Type in the name of the procedure in the <span class="bold"><strong>SP
								Name</strong></span> field as it is called in the Database. In this
							example, <span class="emphasis"><em>getstate</em></span>. The procedure to be executed
							states as follows:</p><p>
							</p><pre class="programlisting">DROP PROCEDURE
IF EXISTS `talend`.`getstate` $$<span></span>
CREATE DEFINER=`root`@`localhost` PROCEDURE `getstate`(IN pid INT, OUT
pstate VARCHAR(50))<span></span>
BEGIN<span></span>
SELECT LabelState INTO pstate FROM us_states WHERE idState = pid;<span></span>
END $$</pre><p>
						</p></li><li class="listitem"><p> In the <span class="bold"><strong>Parameters</strong></span> area, click the
							plus button to add a line to the table. </p></li><li class="listitem"><p> Set the <span class="bold"><strong>Column</strong></span> field to
								<span class="emphasis"><em>ID</em></span>, and the <span class="bold"><strong>Type</strong></span> field to <span class="emphasis"><em>IN</em></span> as it will be
							given as input parameter to the procedure.</p></li><li class="listitem"><p> Add a second line and set the <span class="bold"><strong>Column</strong></span>
							field to <span class="emphasis"><em>State</em></span> and the <span class="bold"><strong>Type</strong></span> to <span class="emphasis"><em>Out</em></span> as this is the output
							parameter to be returned.</p></li><li class="listitem"><p> Eventually, set the <span class="bold"><strong>tLogRow</strong></span>
							component properties.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlSP4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Synchronize the schema with the preceding component.</p></li><li class="listitem"><p> And select the <span class="bold"><strong>Print values in cells of a
								table</strong></span> check box for reading convenience.</p></li><li class="listitem"><p> Then save your Job and execute it.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlSP5.png"></div><p>The output shows the state labels corresponding to the odd state ids as
					defined in the procedure.</p><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>Check the <span class="bold"><strong>tPostgresqlCommit</strong></span> component if
						you want to analyze a set of records from a database table or DB query and
						return single records.</p></td></tr></table></div></div></div></body></html>