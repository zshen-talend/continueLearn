<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tRecordMatching</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Enterprise"><link rel="up" href="Raa78577.html" title="Chapter&nbsp;5.&nbsp;Data Quality components"><link rel="prev" href="tQASBatchAddressRow.html" title="tQASBatchAddressRow"><link rel="next" href="tReplaceList.html" title="tReplaceList"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tRecordMatching"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tRecordMatching"></a>tRecordMatching</h2></div></div></div><div class="mediaobject"><img src="../images/tRecordMatching_icon32.png"></div><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p><span class="italic">This component will be available in the <span class="bold"><strong>Palette</strong></span> of the studio on the condition that you have subscribed to
				the relevant edition of <span class="bluebold">Talend Enterprise Data Quality</span>.</span>
		</p></td></tr></table></div><div class="section" title="tRecordMatching properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e68576"></a>tRecordMatching properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
							<p>
								<span class="bold"><strong>Component family</strong></span>
							</p>
						</td><td valign="top">
							<p>Data Quality</p>
						</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Function</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p><span class="bold"><strong>tRecordMatching </strong></span>joins two tables
								by doing a fuzzy match on several columns using a wide variety of
								comparison algorithms. It compares columns from the main flow with
								reference columns from the lookup flow and outputs the match data,
								the possible match data and the rejected data.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Purpose</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p>Helps ensuring the data quality of any source data against a
								reference data source.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Basic settings</strong></span>
							</p>
						</td><td valign="top">
							<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
								schema</em></span></p>
						</td><td valign="top">
							<p>A schema is a row description, i.e., it defines the number of
								fields that will be processed and passed on to the next component.
								The schema is either built-in or remote in the Repository.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p><span class="bold"><strong>Built-in</strong></span>: You create and store
								the schema locally for this component only. Related topic: see
									<span class="bluebold">Talend Enterprise Studio</span>
								<span class="bold"><strong>User Guide</strong></span>.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p><span class="bold"><strong>Repository</strong></span>: You have already
								created and stored the schema in the Repository. You can reuse it in
								other projects and job designs. Related topic: see <span class="bluebold">Talend Enterprise Studio</span>
								<span class="bold"><strong>User Guide</strong></span>.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Replace output column with lookup columnn if matches or
									possible matches</em></span>
							</p>
						</td><td valign="top">
							<p>Select this check box to replace the output column with the lookup
								column in case of match or possible match values.</p>
							<p>Once this check box is selected, the <span class="bold"><strong>Columns Mapping</strong></span>
								table appears.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Columns Mapping</em></span>
							</p>
						</td><td valign="top">
							<p>Complete this table to define the output columns to be replaced
								and the corresponding substitute lookup columns. The column to be
								complete are:</p>
							<p>- <span class="bold"><strong>Output Column</strong></span>: select the column of interest from
								the drop-down list. On this list, two columns
									<span class="emphasis"><em>MATCHING_WEIGHT</em></span> and
									<span class="emphasis"><em>MATCHING_DISTANCES</em></span>, are defined by default;
								the other columns are available only when you have defined them in
								the schema editor of this component. For further information about
								these two default columns, see <a class="xref" href="tRecordMatching.html#Raa31651" title="Scenario 1: Matching entries using the Q-grams and Levenshtein algorithms">the section called &#8220;Scenario 1: Matching entries using the Q-grams and Levenshtein algorithms&#8221;</a>;</p>
							<p>- <span class="bold"><strong>Lookup Column</strong></span>: select the column of interest from
								the drop-down list. This list is available when a lookup link has
								been defined to provide the corresponding lookup columns to this
								component.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="emphasis"><em>Key definition</em></span>
							</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Input key attribute</em></span>
							</p>
						</td><td valign="top">
							<p>Select the column(s) from the main flow that needs to be checked
								against the reference (lookup) key column.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Lookup Key Attribute</em></span>
							</p>
						</td><td valign="top">
							<p>Select the lookup key columns that you will use as a reference
								against which to compare the columns from the input flow.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Matching Type</em></span>
							</p>
						</td><td valign="top">
							<p>Select the relevant matching algorithm from the list:</p>
							<p><span class="bold"><strong>Exact Match</strong></span>: matches each
								processed entry to all possible reference entries with exactly the
								same value.</p>
							<p><span class="bold"><strong>Levenshtein</strong></span>: Based on the edit
								distance theory. It calculates the number of insertion, deletion or
								substitution required for an entry to match the reference entry. </p>
							<p><span class="bold"><strong>Metaphone</strong></span>: Based on a phonetic
								algorithm for indexing entries by their pronunciation. It first
								loads the phonetics of all entries of the lookup reference and
								checks all entries of the main flow against the entries of the
								reference flow.</p>
							<p><span class="bold"><strong>Double Metaphone</strong></span>: a new version
								of the Metaphone phonetic algorithm, that produces more accurate
								results than the original algorithm. It can return both a primary
								and a secondary code for a string. This accounts for some ambiguous
								cases as well as for multiple variants of surnames with common
								ancestry.</p>
							<p><span class="bold"><strong>Exact - ignore case</strong></span>: matches each
								processed entry to all possible reference entries with exactly the
								same value while ignoring the value case.</p>
							<p><span class="bold"><strong>Soundex</strong></span>: matches processed
								entries according to a standard English phonetic algorithm.</p>
							<p><span class="bold"><strong>Soundex FR</strong></span>: matches processed
								entries according to a standard French phonetic algorithm.</p>
							<p><span class="bold"><strong>Jaro</strong></span>: matches processed entries
								according to spelling deviations.</p>
							<p><span class="bold"><strong>q-grams</strong></span>: matches processed
								entries by dividing strings into letter blocks of length
									<code class="code">q</code> in order to create a number of <code class="code">q
								</code>length grams. The matching result is given as the number of
								q-gram matches over possible q-grams.</p>
							<p><span class="bold"><strong>custom...</strong></span>: enables you to load an
								external matching algorithm from a Java library. The <span class="bold"><strong>Custom Matcher class</strong></span> column alongside is
								activated when you selected this option.</p>
							<p> For further information about how to load an external Java
							    library, see <a class="xref" href="tLibraryLoad.html" title="tLibraryLoad">the section called &#8220;tLibraryLoad&#8221;</a>.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Custom Matcher class</em></span>
							</p>
						</td><td valign="top">
							<p>Type in the path pointing to the custom class (external matching
								algorithm) you need to use. This path is defined by yourself in the
								library file (<span class="emphasis"><em>.jar</em></span> file).</p>
							<p> For example, to use a <span class="emphasis"><em>MyDistance.class</em></span> class
								stored in the directory <span class="emphasis"><em>org/talend/mydistance</em></span>
								in a user-defined <span class="emphasis"><em>mydistance.jar</em></span> library, the
								path to be entered is
									<span class="emphasis"><em>org.talend.mydistance.MyDistance</em></span>.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Confidence Weight</em></span>
							</p>
						</td><td valign="top">
							<p>Set a numerical weight for each attribute (column) of the key
								definition. The values can be anything &gt;= 0.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="emphasis"><em>Blocking Definition</em></span>
							</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Input Column</em></span>
							</p>
						</td><td valign="top">
							<p>If required, select the column(s) from the input flow according to
								which you want to partition the processed data in blocks, this is
								usually referred to as &#8220;blocking&#8221;. </p>
							<p> Blocking reduces the number of pairs of records that needs to be
								examined. In blocking, input data is partitioned into exhaustive
								blocks designed to increase the proportion of matches observed while
								decreasing the number of pairs to compare. Comparisons are
								restricted to record pairs within each block.</p>
							<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>Using blocking column(s) is very useful when you are
									processing very big data.</p></td></tr></table></div>
						</td></tr><tr><td valign="top">&nbsp;</td><td valign="top">
							<span class="italic">Matching strategy</span>
						</td><td valign="top">
							<p>Select the matching output that best fulfils your needs. This
								option may be: </p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>All matches: this option means to output all of the
											matching results.</p></li><li class="listitem"><p>Best match: this option means to output only the most
											matching result.</p></li><li class="listitem"><p>First match: this option means to output the first
											matching result.</p></li><li class="listitem"><p>Last match: this option means to output the last
											matching result.</p></li></ul></div>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Advanced settings</strong></span>
							</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Matching Algorithm</em></span>
							</p>
						</td><td valign="top">
							<p>Select an algorithm from the list - only one is available for the
								time being.</p>
							<p><span class="bold"><strong>Simple VSR Matcher</strong></span>: This
								algorithm is based on a Vector Space Retrieval method that specifies
								how two records may match.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Possible match interval</em></span>
							</p>
						</td><td valign="top">
							<p>Enter a minimum and a maximum values:</p>
							<p><span class="bold"><strong>minimum</strong></span>: set the minimum record
								distance allowed to match the reference (0 &lt;= minimum). <span class="bold"><strong>maximum</strong></span>: set the maximum distance allowed
								to match the reference (maximum &lt;=1).</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Store on disk</em></span>
							</p>
						</td><td valign="top">
							<p>Select this check box if you want to store processed data blocks
								on the disk to maximize system performance.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="italic">tStatCatcher Statistics</span></p>
						</td><td valign="top">
							<p>Select this check box to collect log data at the component
								level.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Usage</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p>This component is not startable and it requires two input
								components and one or more output components.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Limitation/prerequisite</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p>n/a</p>
						</td></tr></tbody></table></div><div class="section" title="Creating a custom matching algorithm"><div class="titlepage"><div><div><h4 class="title"><a name="Raa71983"></a>Creating a custom matching algorithm</h4></div></div></div><p>The <span class="bold"><strong>tRecordMatching</strong></span> component enables you to use
				a user-defined matching algorithm for obtaining as more matching results as you
				need.</p><p>A custom matching algorithm is written manually and stored in a
					<span class="emphasis"><em>.jar</em></span> file (Java archive). <span class="bold"><strong>Talend</strong></span> provides an
				example <span class="emphasis"><em>.jar</em></span> file on the basis of which you are supposed to
				develop your own file easily. To do this, proceed as follows:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In Eclipse, check out the <span class="emphasis"><em>test.mydistance</em></span> project
						from svn at:</p><p>
						<a class="link" href="http://talendforge.org/svn/top/trunk/test.mydistance/" target="_top">http://talendforge.org/svn/top/trunk/test.mydistance/</a>
					</p></li><li class="listitem"><p>In this project, navigate to the Java class named
							<span class="emphasis"><em>MyDistance.Java</em></span>.</p></li></ul></div><div class="mediaobject"><img src="../images/tRecordMatching_Algorithm_Creation.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Open this file. The following figure presents the code in this
						file.</p></li></ul></div><div class="mediaobject"><img src="../images/tRecordMatching_Algorithm_Creation1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In this file, type in the class name for the custom algorithm you are
						creating in order to replace the default name. This default name is
							<span class="emphasis"><em>MyDistance</em></span> and you can find it in this line:
							<code class="code">public class MyDistance implements
						IAttributeMatcher</code>.</p></li><li class="listitem"><p>In the place where the default algorithm is in this file, type in the
						algorithm you need to create to replace this default one. This default
						algorithm reads as follows: </p></li></ul></div><div class="mediaobject"><img src="../images/tRecordMatching_Algorithm_Creation1Half.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Save your modifications.</p></li><li class="listitem"><p>Using Eclipse, export this new <span class="emphasis"><em>.jar</em></span> file.</p></li></ul></div><p>Then this user-defined algorithm is ready to be used by this <span class="bold"><strong>tRecordMatching</strong></span> component.</p><p>
				<span>&nbsp;</span>
			</p></div></div><div class="section" title="Scenario 1: Matching entries using the Q-grams and Levenshtein algorithms"><div class="titlepage"><div><div><h3 class="title"><a name="Raa31651"></a>Scenario 1: Matching entries using the Q-grams and Levenshtein algorithms</h3></div></div></div><p>This Java scenario describes a six-component Job that aims at:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>matching entries in the <span class="emphasis"><em>name</em></span> column against the entries
					in the reference input file by dividing strings into letter blocks of length q,
					where q is three, in order to create a number of q length grams. The matching
					result is given as the number of q-gram matches over possible q-grams,</p></li><li class="listitem"><p>checking the edit distance between the entries in the
						<span class="emphasis"><em>email</em></span> column of an input file against those of the
					reference input file.</p></li></ul></div><p>The outputs of these two matching types are written in three output files: the first
			for match values, the second for possible match values and the third for the values for
			which there are no matches in the lookup file. </p><p>In this scenario, we have already stored the main and reference input schemas in the
			Repository. For more information about storing schema metadata in the Repository, see
				<span class="bluebold">Talend Enterprise Studio</span>
			<span class="bold"><strong>User Guide</strong></span>.</p><p>The main input table contains seven columns: <span class="emphasis"><em>code</em></span>,
				<span class="emphasis"><em>name</em></span>, <span class="emphasis"><em>address</em></span>,
				<span class="emphasis"><em>zipcode</em></span>, <span class="emphasis"><em>city</em></span>, <span class="emphasis"><em>email</em></span>
			and <span class="emphasis"><em>col7</em></span>. We want to carry the fuzzy match on two columns:
				<span class="emphasis"><em>name</em></span> and <span class="emphasis"><em>email</em></span>.</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Repository</strong></span> tree view, expand <span class="bold"><strong>Metadata</strong></span> - <span class="bold"><strong>DB
						Connections</strong></span> where you have stored the main input schemas and drop
					the relevant file onto the design workspace.</p><p> The <span class="bold"><strong>[Components]</strong></span> dialog box displays with
					the corresponding component selected by default.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tRecordMatching.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Click <span class="bold"><strong>OK</strong></span> to drop the <span class="bold"><strong>tMysqlInput</strong></span> component onto the workspace. The input table used
					in this scenario is called <span class="emphasis"><em>person</em></span>. It holds several columns
					including the two columns <span class="emphasis"><em>name</em></span> and
						<span class="emphasis"><em>email</em></span> we want to do the fuzzy match on.</p></li><li class="listitem"><p>Do the same for the second input table you want to use as a reference,
						<span class="emphasis"><em>customer </em></span>in this scenario.</p></li><li class="listitem"><p>Drop the following components from the <span class="bold"><strong>Palette</strong></span> onto the design workspace: <span class="bold"><strong>tRecordMatching</strong></span> and <span class="bold"><strong>tLogRow</strong></span>
					(x3).</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tRecordMatching1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Connect the main and reference input components to <span class="bold"><strong>tRecordMatching</strong></span> using <span class="bold"><strong>Main</strong></span>
					links. The link between the reference input table and <span class="bold"><strong>tRecordMatching</strong></span> displays as a <span class="bold"><strong>Lookup</strong></span> link on the design workspace.</p></li><li class="listitem"><p>Connect <span class="bold"><strong>tRecordMatching</strong></span> to the three
						<span class="bold"><strong>tLogRow </strong></span>components using the <span class="bold"><strong>Matches</strong></span>, <span class="bold"><strong>Possible
						Matches</strong></span> and <span class="bold"><strong>Non Matches</strong></span>
					links.</p></li><li class="listitem"><p>Double-click the main and reference input database components to display their
						<span class="bold"><strong>Basic settings</strong></span> views.</p><p> The below capture illustrate the properties of the
						<span class="emphasis"><em>person</em></span> input table.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tRecordMatching2.png"></div><p>The below capture illustrate the properties of the <span class="emphasis"><em>customer</em></span> input
			table.</p><div class="mediaobject"><img src="../images/Use_Case_tRecordMatching3.png"></div><p>The property fields for both <span class="bold"><strong>tMysqlInput</strong></span> components
			are automatically filled in. If you do not define your input schemas locally in the
			Repository, fill in the details manually after selecting <span class="bold"><strong>Built-in</strong></span> in the <span class="bold"><strong>Schema Type</strong></span> and
				<span class="bold"><strong>Property Type</strong></span> fields.</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Double-click <span class="bold"><strong>tRecordMatching</strong></span> to display its
						<span class="bold"><strong>Basic settings</strong></span> view and define its
					properties.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tRecordMatching4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Click the <span class="bold"><strong>Edit schema</strong></span> button to open a dialog
					box. Here you can define the data you want to pass to the output
					components.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tRecordMatching5.png"></div><p>In this example we want to pass to the <span class="bold"><strong>tRecordMatching</strong></span> component the <span class="emphasis"><em>name</em></span> and
				<span class="emphasis"><em>email</em></span> columns from the first <span class="bold"><strong>tMysqlInput</strong></span> component, and the <span class="emphasis"><em>ref_name</em></span> and
				<span class="emphasis"><em>ref_</em></span><span class="emphasis"><em>email</em></span> columns from the second
				<span class="bold"><strong>tMysqlInput</strong></span> component.</p><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>The <span class="emphasis"><em>MATCHING_DISTANCE</em></span> and the
					<span class="emphasis"><em>MATCHING_WEIGHT</em></span> columns in the output schema are defined by
				default.</p></td></tr></table></div><p>The <span class="emphasis"><em>MATCHING_WEIGHT</em></span> column is always between
				<span class="emphasis"><em>0</em></span> and <span class="emphasis"><em>1</em></span>. It is a global distance between
			sets of columns (defined by the columns to be matched). </p><p>The <span class="emphasis"><em>MATCHING_DISTANCE</em></span> column will print a distance for each of
			the columns on which we use an algorithm. The results will be separated by a vertical
			bar (pipe).</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Click <span class="bold"><strong>OK</strong></span> to close the dialog box and proceed
					to the next step.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Key Definition</strong></span> area of the <span class="bold"><strong>Basic settings</strong></span> view of <span class="bold"><strong>tRecordMatching</strong></span>, click the plus button to add two columns to the
					list.</p></li><li class="listitem"><p>Select the input columns and the output columns you want to do the fuzzy
					matching on from the <span class="bold"><strong>Input key attribute</strong></span> and
						<span class="bold"><strong>Lookup key attribute</strong></span> lists respectively. </p><p> In this example, select <span class="emphasis"><em>name</em></span> and <span class="emphasis"><em>email
					</em></span>as input attributes and <span class="emphasis"><em>ref-name</em></span> and
						<span class="emphasis"><em>ref_email</em></span> as lookup attributes.</p></li><li class="listitem"><p>Click in the <span class="bold"><strong>Matching type</strong></span> column and select
					from the list <span class="bold"><strong>q-gram</strong></span>, the method to be used on
					the first column to check the incoming data against the reference data.</p></li><li class="listitem"><p>Set the matching type for the second column, <span class="bold"><strong>Levenshtein</strong></span> in this example.</p></li></ul></div><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>The minimum and maximum possible match values are defined in the <span class="bold"><strong>Advanced settings</strong></span> view. You can change the by-default
				values.</p></td></tr></table></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Confidence Weight</strong></span> column, set a
					numerical weight for each of the columns used as key attributes.</p></li><li class="listitem"><p>If required, click the plus button below the <span class="bold"><strong>Blocking
						Definition</strong></span> table to add one or more lines in the table and then
					click in the line and select from the list the column you want to use as a
					blocking value. </p><p> Using a blocking value reduces the number of pairs of records that needs to
					be examined. The input data is partitioned into exhaustive blocks based on the
					blocking value. This will decrease the number of pairs to compare as comparison
					is restricted to record pairs within each block. Check <a class="xref" href="tGenKey.html#Raa99658" title="Scenario&nbsp;2: Comparing columns and grouping in the output flow duplicate records that have the same functional key">the section called &#8220;Scenario&nbsp;2: Comparing columns and grouping in the output flow duplicate
                        records that have the same functional key&#8221;</a> for a use case of the blocking value. </p></li><li class="listitem"><p>Double-click the first <span class="bold"><strong>tLogRow </strong></span>component to
					display its <span class="bold"><strong>Basic settings</strong></span> view and define its
					properties.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tBlockedFuzzyJoin5.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Mode</strong></span> area, select <span class="bold"><strong>Table</strong></span> to display the source file and the <span class="bold"><strong>tRecordMatching</strong></span> results together to be able to
					compare them.</p></li><li class="listitem"><p>Do the same for the other two<span class="bold"><strong> tLogRow</strong></span>
					components.</p></li><li class="listitem"><p>Save your Job and press <span class="bold"><strong>F6</strong></span> to execute
					it.</p></li></ul></div><p>Three output tables are written on the console. The first shows the match entries, the
			second show the possible match entries and the third shows the non match entries
			according to the used matching method in the defined columns.</p><p>The figure below illustrates extractions of the three output tables.</p><div class="mediaobject"><img src="../images/Use_Case_tRecordMatching7and8and10.png"></div><p>The first table lists all the names and emails that could be matched with identical
			entries in the reference table. Thus the matching distance and the matching weight are
			equal to &#8220;1.0&#8221;. </p><p>The second table lists all the names and emails that have a possible match in the
			reference table. The matching distance column prints the distances for the
				<span class="emphasis"><em>name</em></span> and <span class="emphasis"><em>email</em></span> columns and separate them
			by a vertical bar.</p><p>The third table lists all the names and emails that do not have match in the reference
			table.</p></div><div class="section" title="Scenario 2: Using a custom matching algorithm to match entries"><div class="titlepage"><div><div><h3 class="title"><a name="Raa86106"></a>Scenario 2: Using a custom matching algorithm to match entries</h3></div></div></div><p>In this scenario, reuse the previous Job to load and apply a given custom matching
			algorithm.</p><p>To do this, some modifications on this Job are necessary to make it display as
			follows:</p><div class="mediaobject"><img src="../images/use_case_trecordmatchingLoadJar.png"></div><p>In this Job, we use the example Java archive named <span class="emphasis"><em>mydistance.jar</em></span> to
			provide the user-defined matching algorithm, <span class="emphasis"><em>MyDistance.class</em></span>. For
			further information about the contents of this example Java archive, see <a class="xref" href="tRecordMatching.html#Raa71983" title="Creating a custom matching algorithm">the section called &#8220;Creating a custom matching algorithm&#8221;</a>.</p><p>To replicate this scenario, proceed as follows:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>On the previous Job, drop the <span class="bold"><strong>tLibraryLoad</strong></span>
					component from the <span class="bold"><strong>Palette</strong></span> to the Design
					workspace.</p></li><li class="listitem"><p>Then delete the <span class="bold"><strong>tLogRow</strong></span> components named
						<span class="emphasis"><em>possible</em></span> and <span class="emphasis"><em>none</em></span>.</p></li><li class="listitem"><p>Right click <span class="bold"><strong>tLibraryLoad</strong></span> to open its
					contextual menu.</p></li><li class="listitem"><p>From this menu, select <span class="bold"><strong>Trigger &gt; On Subjob
						Ok</strong></span> link to connect it to the <span class="bold"><strong>tMySQLInput</strong></span> (<span class="emphasis"><em>person</em></span>) component.</p></li><li class="listitem"><p>Move the remained <span class="bold"><strong>tLogRow</strong></span> (match) component
					to align it with the <span class="bold"><strong>tRecordMatching</strong></span>
					component.</p></li><li class="listitem"><p>Double click <span class="bold"><strong>tLibraryLoad</strong></span> to open its
						<span class="bold"><strong>Component</strong></span> view.</p></li></ul></div><div class="mediaobject"><img src="../images/use_case_trecordmatchingLoadJar1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In this view, browse to the <span class="emphasis"><em>mydistance.jar</em></span> file.</p></li><li class="listitem"><p>Double click <span class="bold"><strong>tRecordMatching</strong></span> to open its
						<span class="bold"><strong>Component</strong></span> view.</p></li></ul></div><div class="mediaobject"><img src="../images/use_case_trecordmatchingLoadJar2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Key Definition</strong></span> table of this view,
					click the <span class="emphasis"><em>name</em></span> row in the <span class="bold"><strong>Matching
						Type</strong></span> column and select <span class="bold"><strong>custom...</strong></span>
					from the drop-down list.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Custom matcher class</strong></span> of this
						<span class="emphasis"><em>name</em></span> row, type in the path pointing to
						<span class="emphasis"><em>MyDistance.class</em></span> in the
						<span class="emphasis"><em>mydistance.jar</em></span> file. In this example, this path is
						<span class="emphasis"><em>org.talend.mydistance.MyDistance</em></span>.</p></li><li class="listitem"><p>Press <span class="bold"><strong>F6</strong></span> to run this Job.</p></li></ul></div><p>In the Run view, the matched entries are identified and listed as follows:</p><div class="mediaobject"><img src="../images/use_case_trecordmatching7.png"></div></div></div></body></html>