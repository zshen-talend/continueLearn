<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tSQLiteInput</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Open Studio"><link rel="up" href="Raa29876.html" title="Chapter&nbsp;6.&nbsp;Database components"><link rel="prev" href="tSQLiteConnection.html" title="tSQLiteConnection"><link rel="next" href="tSQLiteOutput.html" title="tSQLiteOutput"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tSQLiteInput"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tSQLiteInput"></a>tSQLiteInput</h2></div></div></div><div class="mediaobject"><img src="../images/tSQLiteInput_icon32_white.png"></div><div class="section" title="tSQLiteInput Properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e151085"></a>tSQLiteInput Properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p>
										<span class="bold"><strong>Component family</strong></span>
									</p>
								</td><td valign="top">
									<p>Databases</p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tSQLiteInput</strong></span> reads a
										database file and extracts fields based on an SQL query. As
										it embeds the SQLite engine, no need of connecting to any
										database server.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tSQLiteInput</strong></span> executes a
										DB query with a defined command which must correspond to the
										schema definition. Then it passes on rows to the next
										component via a Main row link. </p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Property type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: No property
										data stored centrally.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										repository file in which the properties are stored. The
										fields that follow are completed automatically using the
										data retrieved.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Use an existing connection</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box and click the relevant <span class="bold"><strong>tSQLiteConnection </strong></span>component on
										the <span class="bold"><strong>Component list</strong></span> to reuse
										the connection details you already defined.</p>
									<p> </p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>When a Job contains the parent Job and the child Job,
												<span class="bold"><strong>Component list</strong></span>
											presents only the connection components in the same Job
											level, so if you need to use an existing connection from
											the other level, make sure that the available connection
											components are sharing the intended connection.</p><p>For more information on how to share a DB connection
											across Job levels, see <span class="bold"><strong>Use or
												register a shared DB connection</strong></span> in any
											database connection component corresponding to the
											database you are using.</p><p>Otherwise, you can as well deactivate the connection
											components and use <span class="bold"><strong>Dynamic
												settings</strong></span> of the component to specify the
											intended connection manually. In this case, make sure
											the connection name is unique and distinctive all over
											through the two Job levels. For more information about
												<span class="bold"><strong>Dynamic settings</strong></span>,
											see your studio user guide.</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<div class="mediaobject"><img src="../images/Save_Icon.png"></div>
								</td><td valign="top">
									<p>Click this icon to open a database connection wizard and
										store the database connection parameters you set in the
										component <span class="bold"><strong>Basic settings
										</strong></span>view.</p>
									<p> For more information about setting up and storing
										database connection parameters, see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Database</em></span>
									</p>
								</td><td valign="top">
									<p>Filepath to the SQLite database file.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											Schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields to be processed and passed on to the next
										component. The schema is either <span class="bold"><strong>Built-in</strong></span> or stored remotely in the <span class="bold"><strong>Repository</strong></span>. </p>
									<p> </p>

								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: The schema is
										created and stored locally for this component only. Related
										topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: The schema
										already exists and is stored in the Repository, hence can be
										reused. Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Query type</em></span>
									</p>
								</td><td valign="top">
									<p>The query can be built-in for a particular job or for
										commonly used query, it can be stored in the repository to
										ease the query reuse.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Query</em></span>
									</p>
								</td><td valign="top">
									<p>If your query is not stored in the Repository, type in
										your DB query paying particularly attention to properly
										sequence the fields in order to match the schema definition. </p>

								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Advanced settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Trim all the String/Char columns</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to remove leading and trailing
										whitespace from all the String/Char columns.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Trim column</em></span>
									</p>
								</td><td valign="top">
									<p>Remove leading and trailing whitespace from defined
										columns.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>tStat</em></span><span class="emphasis"><em>Catcher</em></span>
										Statistics</p>
								</td><td valign="top">
									<p>Select this check box to collect log data at the component
										level.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component is standalone as it includes the SQLite
										engine. This is a startable component that can iniate a data
										flow processing. </p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario: Filtering SQlite data"><div class="titlepage"><div><div><h3 class="title"><a name="d0e151494"></a>Scenario: Filtering SQlite data</h3></div></div></div><p>This scenario describes a rather simple job which uses a select statement
					based on a filter to extract rows from a source SQLite Database and feed an
					output SQLite table. </p><div class="mediaobject"><img src="../images/Use_Case_tSQLite1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Drop from the <span class="bold"><strong>Palette</strong></span>, a <span class="bold"><strong>tSQLiteInput</strong></span> and a <span class="bold"><strong>tSQLiteOutput</strong></span> component from the <span class="bold"><strong>Palette</strong></span> to the design workspace.</p></li><li class="listitem"><p> Connect the input to the output using a row main link.</p></li><li class="listitem"><p> On the <span class="bold"><strong>tSQLiteInput</strong></span> Basic settings,
							type in or browse to the SQLite Database input file.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLite2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> The file contains hundreds of lines and includes an <span class="bold"><strong>ip</strong></span> column which the select statement will
							based on</p></li><li class="listitem"><p> On the <span class="bold"><strong>tSQLite</strong></span> Basic settings, edit
							the schema for it to match the table structure.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLite3.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> In the <span class="bold"><strong>Query</strong></span> field, type in your
							select statement based on the <span class="emphasis"><em>ip</em></span> column.</p></li><li class="listitem"><p> On the <span class="bold"><strong>tSQLiteOutput</strong></span> component
								<span class="bold"><strong>Basic settings</strong></span> panel, select the
								<span class="bold"><strong>Database </strong></span>filepath.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLite4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Type in the <span class="bold"><strong>Table</strong></span> to be fed with the
							selected data.</p></li><li class="listitem"><p> Select the <span class="bold"><strong>Action on table</strong></span> and
								<span class="bold"><strong>Action on Data</strong></span>. In this use case,
							the action on table is <span class="emphasis"><em>Drop and create </em></span>and the
							action on data is <span class="emphasis"><em>Insert</em></span>. </p></li><li class="listitem"><p> The schema should be synchronized with the input schema.</p></li><li class="listitem"><p> Save the job and run it.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLite5.png"></div><p>The data queried is returned in the defined SQLite file.</p></div></div></body></html>