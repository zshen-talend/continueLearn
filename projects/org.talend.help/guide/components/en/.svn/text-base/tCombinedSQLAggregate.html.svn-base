<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tCombinedSQLAggregate</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Open Studio"><link rel="up" href="Raa48933-dup-2.html" title="Chapter&nbsp;7.&nbsp;ELT components"><link rel="prev" href="Raa48933-dup-2.html" title="Chapter&nbsp;7.&nbsp;ELT components"><link rel="next" href="tCombinedSQLFilter.html" title="tCombinedSQLFilter"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tCombinedSQLAggregate"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tCombinedSQLAggregate"></a>tCombinedSQLAggregate</h2></div></div></div><div class="mediaobject"><img src="../images/tCombinedSQLAggregate_icon32_white.png"></div><div class="section" title="tCombinedSQLAggregate properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e173608"></a>tCombinedSQLAggregate properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p>
										<span class="bold"><strong>Component family</strong></span>
									</p>
								</td><td valign="top">
									<p>ELT/CombinedSQL</p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tCombinedSQLAggregate</strong></span>
										collects data values from one or more columns of a table for
										statistical purposes. This component has real-time
										capabilities since it runs the data transformation on the
										DBMS itself.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>Helps to provide a set of matrix based on values or
										calculations. </p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields that will be processed and passed on to the next
										component. The schema is either built-in or remote in the
										Repository. </p>
									<p> Click <span class="bold"><strong>Edit Schema </strong></span>to
										make changes to the schema. Note that if you make changes,
										the schema automatically becomes built-in.</p>
									<p> Click <span class="bold"><strong>Sync columns</strong></span> to
										retrieve the schema from the previous component connected in
										the Job.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: You create and
										store the schema locally for this component only. Related
										topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: You have
										already created the schema and stored it in the Repository.
										You can reuse it in various projects and Jobs. Related
										topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span></p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Group by</em></span>
									</p>
								</td><td valign="top">
									<p>Define the aggregation sets, the values of which will be
										used for calculations.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Output Column</strong></span>: Select the
										column label in the list offered according to the schema
										structure you defined. You can add as many output columns as
										you wish to make more precise aggregations.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Input Column</strong></span>: Select the
										input column label to match the output column&#8217;s expected
										content, in case the output label of the aggregation set
										needs to be different.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Operations</em></span>
									</p>
								</td><td valign="top">
									<p>Select the type of operation along with the value to use
										for the calculation and the output field.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Output Column</strong></span>: Select the
										destination field in the list.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Function</strong></span>: Select any of
										the following operations to perform on data: <span class="bold"><strong>count</strong></span>, <span class="bold"><strong>min</strong></span>, <span class="bold"><strong>max</strong></span>,
											<span class="bold"><strong>avg</strong></span>, <span class="bold"><strong>sum</strong></span>, <span class="bold"><strong>first</strong></span>, <span class="bold"><strong>last</strong></span>, <span class="bold"><strong>distinct</strong></span>
										and <span class="bold"><strong>count</strong></span><span class="bold"><strong> (distinct)</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Input column</strong></span>: Select the
										input column from which you want to collect the values to be
										aggregated.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Advanced settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>tStatCatcher Statistics</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to gather the Job processing
										metadata at a Job level as well as at each component
										level.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component is an intermediary component. The use of
										the corresponding connection and commit components is
										recommended when using this component to allow a unique
										connection to be open and then closed during the Job
										execution.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Limitation</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>n/a</p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario: Filtering and aggregating table columns directly on the DBMS"><div class="titlepage"><div><div><h3 class="title"><a name="d0e173953"></a>Scenario: Filtering and aggregating table columns directly on the
					DBMS</h3></div></div></div><p>The following scenario creates a Job that opens a connection to a MySQL
					database and:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>instantiates the schema from a database table in part (for column
							filtering),</p></li><li class="listitem"><p>filters two columns in the same table to get only the data that meets
							two filtering conditions,</p></li><li class="listitem"><p>collects data from the filtered column(s), grouped by specific
							value(s) and writes aggregated data in a target database table.</p></li></ul></div><p>To filter and aggregate database table columns:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Drop the following components from the <span class="bold"><strong>Palette</strong></span> onto the design workspace: <span class="bold"><strong>tMysqlConnection</strong></span>, <span class="bold"><strong>tCombinedSQLInput</strong></span>, <span class="bold"><strong>tCombinedSQLFilter</strong></span>, <span class="bold"><strong>tCombinedSQLAggregate</strong></span>, <span class="bold"><strong>tCombinedSQLOutput</strong></span> and <span class="bold"><strong>tMysqlCommit</strong></span>.</p></li><li class="listitem"><p>Connect <span class="bold"><strong>tMysqlConnection</strong></span>, <span class="bold"><strong>tCombinedSQLInput</strong></span> and <span class="bold"><strong>tMysqlCommit</strong></span> using <span class="bold"><strong>OnSubjobOk
							</strong></span>links.</p></li><li class="listitem"><p>Connect <span class="bold"><strong>tCombinedSQLInput</strong></span>, <span class="bold"><strong>tCombinedSQLFilter</strong></span>, <span class="bold"><strong>tCombinedSQLAggregate</strong></span> and <span class="bold"><strong>tCombinedSQLOutput </strong></span>using a <span class="bold"><strong>Combine</strong></span> link.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the design workspace, select <span class="bold"><strong>tMysqlConnection</strong></span> and click the <span class="bold"><strong>Component</strong></span> tab to define its basic settings.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Basic settings</strong></span> view, set the
							database connection details manually or select <span class="bold"><strong>Repository</strong></span> from the <span class="bold"><strong>Property
								Type</strong></span> list and select your DB connection if it has already
							been defined and stored in the <span class="bold"><strong>Metadata</strong></span>
							area of the <span class="bold"><strong>Repository</strong></span> tree view.
						</p></li></ul></div><p>For more information on centralizing DB connection details in the Repository,
					see <span class="bluebold">Talend Open Studio</span>
					<span class="bold"><strong>User Guide</strong></span>.</p><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the design workspace, select <span class="bold"><strong>tCombinedSQLInput</strong></span> and click the <span class="bold"><strong>Component</strong></span> tab to access the configuration panel.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_3.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Enter the source table name in the <span class="bold"><strong>Table</strong></span> field, and click the three-dot button next to
								<span class="bold"><strong>Edit schema</strong></span> to define the data
							structure.</p></li></ul></div><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>The schema defined through <span class="bold"><strong>tCombinedSQLInput</strong></span> can be different from that of the source
						table as you can just instantiate the desired columns of the source table.
						Therefore, <span class="bold"><strong>tCombinedSQLInput</strong></span> also plays a
						role of column filtering.</p></td></tr></table></div><p>In this scenario, the source database table has seven columns: <span class="emphasis"><em>id,
						first_name, last_name, city, state, date_of_birth, </em></span>and
						<span class="emphasis"><em>salary</em></span> while <span class="bold"><strong>tCombinedSQLInput</strong></span> only instantiates four columns that are needed
					for the aggregation: <span class="emphasis"><em>id, state, date_of_birth, </em></span>and
						<span class="emphasis"><em>salary </em></span>from the source table.</p><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_8.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the design workspace, select <span class="bold"><strong>tCombinedSQLFilter</strong></span> and click the <span class="bold"><strong>Component</strong></span> tab to access the configuration panel.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Click the <span class="bold"><strong>Sync columns</strong></span> button to
							retrieve the schema from the previous component, or configure the schema
							manually by selecting <span class="bold"><strong>Built-in</strong></span> from the
								<span class="bold"><strong>Schema</strong></span> list and clicking the
								<span class="bold"><strong>[...]</strong></span> button next to <span class="bold"><strong>Edit schema</strong></span>.</p></li></ul></div><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>When you define the data structure for <span class="bold"><strong>tCombinedSQLFilter</strong></span>, column names automatically appear in the
							<span class="bold"><strong>Input column</strong></span> list in the <span class="bold"><strong>Conditions</strong></span> table.</p></td></tr></table></div><p>In this scenario, the <span class="bold"><strong>tCombinedSQLFilter</strong></span>
					component instantiates four columns: <span class="emphasis"><em>id, state, date_of_birth,
					</em></span>and <span class="emphasis"><em>salary</em></span>.</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Conditions</strong></span> table, set input
							parameters, operators and expected values in order to only extract the
							records that fulfill these criteria.</p></li></ul></div><p>In this scenario, the <span class="bold"><strong>tCombinedSQLFilter
					</strong></span>component filters the <span class="emphasis"><em>state </em></span>and
						<span class="emphasis"><em>date_of_birth</em></span> columns in the source table to extract
					the employees who were born after Oct. 19, 1960 and who live in the states
						<span class="emphasis"><em>Utah</em></span>, <span class="emphasis"><em>Ohio</em></span> and
						<span class="emphasis"><em>Iowa</em></span>.</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Select <span class="bold"><strong>And</strong></span> in the <span class="bold"><strong>Logical operator between conditions</strong></span> list to
							apply the two conditions at the same time. You can also customize the
							conditions by selecting the <span class="bold"><strong>Use custom
								SQL</strong></span> box and editing the conditions in the code
							box.</p></li><li class="listitem"><p>In the design workspace, select <span class="bold"><strong>tCombinedSQLAggregate</strong></span> and click the <span class="bold"><strong>Component</strong></span> tab to access the configuration
							panel.</p></li><li class="listitem"><p>Click the <span class="bold"><strong>Sync columns</strong></span> button to
							retrieve the schema from the previous component, or configure the schema
							manually by selecting <span class="bold"><strong>Built-in</strong></span> from the
								<span class="bold"><strong>Schema</strong></span> list and clicking on the
								<span class="bold"><strong>[...]</strong></span> button.</p></li></ul></div><p>The<span class="bold"><strong> tCombinedSQLAggregate</strong></span> component
					instantiates four columns: <span class="emphasis"><em>id, state, date_of_birth, </em></span>and
						<span class="emphasis"><em>salary</em></span>, coming from the previous component.</p><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_5.png"></div><p>The <span class="bold"><strong>Group by</strong></span> table helps you define the data
					sets to be processed based on a defined column. In this example:
						<span class="emphasis"><em>State</em></span>.</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Group by</strong></span> table, click the
								<span class="bold"><strong>[+]</strong></span> button to add one line.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Output column</strong></span> drop-down list,
							select <span class="emphasis"><em>State</em></span>. This column will be used to hold the
							data filtered on <span class="emphasis"><em>State</em></span>.</p></li></ul></div><p>The <span class="bold"><strong>Operations</strong></span> table helps you define the
					type of aggregation operations to be performed. The <span class="bold"><strong>Output
						column</strong></span> list available depends on the schema you want to output
					(through the <span class="bold"><strong>tCombinedSQLOutput</strong></span> component). In
					this scenario, we want to group employees based on the state they live. We want
					then count the number of employees per state, calculate the
					average/lowest/highest salaries as well as the oldest/youngest employees for
					each state.</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Operations</strong></span> table, click the
								<span class="bold"><strong>[+]</strong></span> button to add one line and then
							click in the <span class="bold"><strong>Output column</strong></span> list to
							select the output column that will hold the computed data. </p></li><li class="listitem"><p>In the <span class="bold"><strong>Function</strong></span> field, select the
							relevant operation to be carried out.</p></li><li class="listitem"><p>In the design workspace, select <span class="bold"><strong>tCombinedSQLOutput</strong></span> and click the <span class="bold"><strong>Component</strong></span> tab to access the configuration panel.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_6.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>On the <span class="bold"><strong>Database type</strong></span> list, select the
							relevant database.</p></li><li class="listitem"><p>On the <span class="bold"><strong>Component list</strong></span>, select the
							relevant database connection component if more than one connection is
							used.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Table</strong></span> field, enter the name of
							the target table which will store the results of the aggregation
							operations.</p></li></ul></div><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>In this example, the <span class="bold"><strong>Schema</strong></span> field doesn't
						need to be filled out as the database is not Oracle.</p></td></tr></table></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Click the three-dot button next to <span class="bold"><strong>Edit
								schema</strong></span> to define the data structure of the target
							table.</p></li></ul></div><p>In this scenario, <span class="bold"><strong>tCombinedSQLOutput
					</strong></span>instantiates seven columns coming from the previous component in the
					Job design (<span class="bold"><strong>tCombinedSQLAggregate</strong></span>):
						<span class="emphasis"><em>state, empl_count, avg_salary, min_salary, max_salary, oldest_empl
					</em></span>and <span class="emphasis"><em>youngest_empl.</em></span></p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the design workspace, select <span class="bold"><strong>tCombinedSQLCommit</strong></span> and click the <span class="bold"><strong>Component</strong></span> tab to access the configuration panel.</p></li><li class="listitem"><p>On the <span class="bold"><strong>Component list</strong></span>, select the
							relevant database connection component if more than one connection is
							used.</p></li><li class="listitem"><p>Save your Job and press <span class="bold"><strong>F6</strong></span> to execute
							it.</p></li></ul></div><p>Rows are inserted into a seven-column table <span class="emphasis"><em>empl_by_state</em></span>
					in the database. The table shows, per defined state, the number of employees,
					the average salary, the lowest and highest salaries as well as the oldest and
					youngest employees.</p><div class="mediaobject"><img src="../images/Use_Case_tCombinedSQLAggregate_7.png"></div></div></div></body></html>