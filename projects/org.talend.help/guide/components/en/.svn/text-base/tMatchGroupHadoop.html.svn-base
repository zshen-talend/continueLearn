<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tMatchGroupHadoop</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Enterprise"><link rel="up" href="Raa78577.html" title="Chapter&nbsp;5.&nbsp;Data Quality components"><link rel="prev" href="tMatchGroup.html" title="tMatchGroup"><link rel="next" href="tMultiPatternCheck.html" title="tMultiPatternCheck"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tMatchGroupHadoop"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tMatchGroupHadoop"></a>tMatchGroupHadoop</h2></div></div></div><div class="mediaobject"><img src="../images/tMatchGroupHadoop_icon32_white.png"></div><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
			<span class="italic"> This component will be available in the <span class="bold"><strong>Palette</strong></span> of the studio on the condition that you have subscribed to
				the relevant edition of <span class="bluebold">Talend Enterprise Data Quality</span>.
			</span>
		</p></td></tr></table></div><div class="section" title="tMatchGroupHadoop properties"><div class="titlepage"><div><div><h3 class="title"><a name="ychen-20111020-data_quality-properties"></a>tMatchGroupHadoop properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
							<p>
								<span class="bold"><strong>Component family</strong></span>
							</p>
						</td><td valign="top">
							<p>Data Quality</p>
						</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Function</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p>Based on Hadoop, <span class="bold"><strong>tMatchGroupHadoop</strong></span> uses given matching rule(s) to
								compare columns in the input flow of large volume and accordingly,
								groups encountered duplicates in the output flow.</p>
							<p>When several <span class="bold"><strong>tMatchGroupHadoop</strong></span>
								components are used sequentially, the first one creates the groups
								of similar records and the others coming after refine the groups
								they receive from their preceding ones, respectively. </p>
							<p>In defining a group, the first processed record of each group is
								the master record of the group; the other records are computed as to
								their distances from the master records and then are distributed to
								the due master record accordingly. In refining the given groups, a
								group with one single record (the group size is one) is compared
								with the other master records and is merged into one of the other
								groups as determined by the distances recomputed in between.</p>
							<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>If you have more than one <span class="bold"><strong>tMatchGroupHadoop</strong></span> components in your Job, the
									distances and the matching scores may not be coherent when the
									criteria you set to compute the distance is different in each
									component</p></td></tr></table></div>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Purpose</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p>This component helps ensure the data quality of any source data of
								large volume.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Basic settings</strong></span>
							</p>
						</td><td valign="top">
							<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
								schema</em></span></p>
						</td><td valign="top">
							<p>A schema is a row description, i.e., it defines the number of
								fields that will be processed and passed on to the next component.
								The schema is either built-in or remote in the Repository.</p>
							<p>Click <span class="bold"><strong>Sync columns</strong></span> to retrieve
								the schema from the previous component in the Job.</p>
							<p>The output schema of this component contains the following
								fields:</p>
							<p><span class="emphasis"><em>GID</em></span>: represents the group identifier.</p>
							<p><span class="emphasis"><em>GRP_SIZE</em></span>: counts the number of records in the
								group, computed only on the master record.</p>
							<p><span class="emphasis"><em>MASTER</em></span>: identifies the record used in the
								matching comparisons. There is only one master record per group.
								Each input record will be compared to a master record, if they
								match, it will be in the group.</p>
							<p><span class="emphasis"><em>SCORE</em></span>: measures the distance between the
								input record and the master record according to the matching
								algorithm used.</p>
							<p><span class="italic">Matching_Distances</span>: it presents
								the distance computed of a record from its master record.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p><span class="bold"><strong>Built-in</strong></span>: You create and store
								the schema locally for this component only. Related topic: see
									<span class="bluebold">Talend Enterprise Studio</span>
								User Guide.</p>
						</td></tr><tr><td>&nbsp;</td><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p><span class="bold"><strong>Repository</strong></span>: You have already
								created and stored the schema in the Repository. You can reuse it in
								other projects and job designs. Related topic: see <span class="bluebold">Talend Enterprise Studio</span> User Guide.</p>
						</td></tr><tr><td>&nbsp;</td><td>
							<p>
								<span class="italic">Link with a tMatchGroupHadoop</span>
							</p>
						</td><td valign="top">
							<p>Select this check box and in the <span class="bold"><strong>Component</strong></span> field, select the relevant <span class="bold"><strong>tMatchGroupHadoop</strong></span> component to reuse the
								Hadoop connection details you already defined.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td>
							<p>
								<span class="italic">Hadoop version</span>
							</p>
						</td><td valign="top">
							<p>Select the Hadoop version of interest from the given list.</p>
						</td></tr><tr><td>
							<p>
								<span class="italic">Hadoop configuration</span>
							</p>
							<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>Unavailable if you use an existing link.</p></td></tr></table></div>
						</td><td>
							<span class="italic">Host</span>
						</td><td valign="top">Type in the IP address of the Hadoop server of
							interest.</td></tr><tr><td>&nbsp;</td><td>
							<span class="italic">Port</span>
						</td><td valign="top">Type in the listening port number of the Hadoop server
							of interest.</td></tr><tr><td>&nbsp;</td><td>
							<span class="italic">HDFS directory</span>
						</td><td valign="top">Type in the location in HDFS used for processing the
							data of large volume.</td></tr><tr><td valign="top">
							<p>
								<span class="emphasis"><em>Key Definition</em></span>
							</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Input Key Attribute</em></span>
							</p>
						</td><td valign="top">
							<p>Select the column(s) from the input flow on which you want to
								apply a matching algorithm.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Matching Type</em></span>
							</p>
						</td><td valign="top">
							<p>Select the relevant matching algorithm from the list:</p>
							<p><span class="bold"><strong>Exact Match</strong></span>: matches each
								processed entry to all possible reference entries with exactly the
								same value.</p>
							<p><span class="bold"><strong>Exact - ignore case</strong></span>: matches each
								processed entry to all possible reference entries with exactly the
								same value while ignoring the value case.</p>
							<p><span class="bold"><strong>Soundex</strong></span>: matches processed
								entries according to a standard English phonetic algorithm.</p>
							<p><span class="bold"><strong>Levenshtein</strong></span>: Based on the edit
								distance theory. It calculates the number of insertion, deletion or
								substitution required for an entry to match the reference entry. </p>
							<p><span class="bold"><strong>Metaphone</strong></span>: Based on a phonetic
								algorithm for indexing entries by their pronunciation. It first
								loads the phonetics of all entries of the lookup reference and
								checks all entries of the main flow against the entries of the
								reference flow.</p>
							<p><span class="bold"><strong>Double Metaphone</strong></span>: a new version
								of the Metaphone phonetic algorithm, that produces more accurate
								results than the original algorithm. It can return both a primary
								and a secondary code for a string. This accounts for some ambiguous
								cases as well as for multiple variants of surnames with common
								ancestry.</p>
							<p><span class="bold"><strong>Soundex FR</strong></span>: matches processed
								entries according to a standard French phonetic algorithm.</p>
							<p><span class="bold"><strong>Jaro-Winkler</strong></span>: matches processed
								entries according to spelling deviations.</p>
							<p><span class="bold"><strong>q-grams</strong></span>: matches processed
								entries by dividing strings into letter blocks of length
									<code class="code">q</code> in order to create a number of <code class="code">q
								</code>length grams. The matching result is given as the number of
								q-gram matches over possible q-grams.</p>
							<p><span class="bold"><strong>custom...</strong></span>: enables you to load an
								external matching algorithm from a Java library. The <span class="bold"><strong>custom matcher class</strong></span> column alongside is
								activated when you selected this option.</p>
							<p> For further information about how to load an external Java
								library, see <a class="xref" href="tLibraryLoad.html" title="tLibraryLoad">the section called &#8220;tLibraryLoad&#8221;</a>.</p>
							<p> For further information about how to create a custom matching
								algorithm, see <a class="xref" href="tRecordMatching.html#Raa71983" title="Creating a custom matching algorithm">the section called &#8220;Creating a custom matching algorithm&#8221;</a>.</p>
							<p> For the related scenario about how to use a custom matching
								algorithm, see <a class="xref" href="tRecordMatching.html#Raa86106" title="Scenario 2: Using a custom matching algorithm to match entries">the section called &#8220;Scenario 2: Using a custom matching algorithm to match entries&#8221;</a>.</p>
						</td></tr><tr><td>&nbsp;</td><td valign="top">
							<span class="italic">Custom matcher class</span>
						</td><td valign="top">
							<p>Type in the path pointing to the custom class (external matching
								algorithm) you need to use. This path is defined by yourself in the
								library file (<span class="emphasis"><em>.jar</em></span> file).</p>
							<p>For example, to use a <span class="emphasis"><em>MyDistance.class</em></span> class
								stored in the directory <span class="emphasis"><em>org/talend/mydistance</em></span>
								in a user-defined <span class="emphasis"><em>mydistance.jar</em></span> library, the
								path to be entered is
									<span class="emphasis"><em>org.talend.mydistance.MyDistance</em></span>.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Confidence Weight</em></span>
							</p>
						</td><td valign="top">
							<p>Set a numerical weight for each attribute (column) of the key
								definition. The values can be anything &gt;= 0.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="emphasis"><em>Blocking Definition</em></span>
							</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Input Column</em></span>
							</p>
						</td><td valign="top">
							<p>If required, select the column(s) from the input flow according to
								which you want to partition the processed data in blocks, this is
								usually referred to as &#8220;blocking&#8221;. </p>
							<p>Blocking reduces the number of pairs of records that needs to be
								examined. In blocking, input data is partitioned into exhaustive
								blocks designed to increase the proportion of matches observed while
								decreasing the number of pairs to compare. Comparisons are
								restricted to record pairs within each block.</p>
							<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>Using blocking column(s) is very useful when you are
									processing very big data.</p></td></tr></table></div>
						</td></tr><tr><td>
							<p>&nbsp; <span class="bold"><strong>Advanced settings</strong></span>
							</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Matching Algorithm</em></span>
							</p>
						</td><td valign="top">
							<p>Select an algorithm from the list - only one is available for the
								time being. </p>
							<p><span class="bold"><strong>Simple VSR Matcher</strong></span>: This
								algorithm is based on a Vector Space Retrieval method that specifies
								how two records may match.</p>
							<p><span class="bold"><strong>Match Interval</strong></span>: Enter the match
								probability. Two data records match when the probability is above
								the set value.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Sort the output data by GID</em></span>
							</p>
						</td><td valign="top">
							<p>Select this check box to group the output data by the group
								ID.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>Output distance details</em></span>
							</p>
						</td><td valign="top">
							<p>Select this check box to fill the fixed output column
									<span class="emphasis"><em>MATCHING_DISTANCES</em></span> with the details of the
								distance between each column. This check box becomes unavailable
								when you select the <span class="bold"><strong>Link with a
									tMatchGroupHadoop</strong></span> check box.</p>
						</td></tr><tr><td>
							<p>
								<span class="italic">Hadoop Properties</span>
							</p>
							<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>Unavailable if you use an existing link.</p></td></tr></table></div>
						</td><td valign="top">
							<span class="italic">Property</span>
						</td><td valign="top">
							<p>If you need to use custom configuration for the Hadoop of
								interest, complete this table with the property or properties to be
								customized. Then at runtime, the customized property or properties
								will override those corresponding ones defined earlier for this
								Hadoop.</p>
							<p>For further information about the properties required by Hadoop,
								see the Hadoop documentation.</p>
						</td></tr><tr><td>&nbsp;</td><td valign="top">
							<span class="italic">Value</span>
						</td><td valign="top">
							<p>Type in the custom property values used to connect to the Hadoop
								of interest.</p>
						</td></tr><tr><td>
							<p>&nbsp;</p>
						</td><td valign="top">
							<p>
								<span class="emphasis"><em>tStatCatcher Statistics</em></span>
							</p>
						</td><td valign="top">
							<p>Select this check box to collect log data at the component
								level.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Usage</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p>This component is an intermediary step. It requires an input flow
								as well as an output flow. It needs the connection to Hadoop for
								processing large volume of data.</p>
							<p>It is ideally used alongside the <span class="bold"><strong>tGenKey</strong></span> component in order to use the blocking
								columns to gain a better performance. In practice, we recommend
								placing the most restrictive blocking criteria in the first
									<span class="bold"><strong>tGenKey</strong></span> component in
								use.</p>
						</td></tr><tr><td valign="top">
							<p>
								<span class="bold"><strong>Limitation/prerequisite</strong></span>
							</p>
						</td><td colspan="2" valign="top">
							<p>n/a</p>
						</td></tr></tbody></table></div></div><div class="section" title="Grouping voluminous customer records in multiple matching passes"><div class="titlepage"><div><div><h3 class="title"><a name="ychen-20111205-tMatchGroupHadoop-multiple_passes"></a>Grouping voluminous customer records in multiple matching passes </h3></div></div></div><p>The Job in this scenario connects to the given Hadoop system and then to group
			voluminous customer records in subsequent matching passes so as to find out the
			customers using the same last names. Each pass provides its matches to the pass that
			follows in order for the latter to refine those matches.</p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-scenario.png" align="middle"></div><p>The components of interest are:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p><span class="bold"><strong>tFixedFlowInput</strong></span>: it provides the customer
					records to be processed.</p></li><li class="listitem"><p>two <span class="bold"><strong>tGenKey</strong></span> components: they generate the
					keys to be used by the <span class="bold"><strong>tMatchGroupHadoop</strong></span>
					components that follow.</p></li><li class="listitem"><p>two <span class="bold"><strong>tMatchGroupHadoop</strong></span> components: they group
					the customer records or refine the defined matching groups using the given
					Hadoop system. Each of them set one pass to match the received records.</p></li><li class="listitem"><p><span class="bold"><strong>tMap</strong></span>: it indexes the column of the keys
					generated by its preceding <span class="bold"><strong>tGenKey</strong></span> component to
					differentiate this column from that of the other <span class="bold"><strong>tGenkey</strong></span> component, so that the two <span class="bold"><strong>tMatchGroupHadoop</strong></span> components can use them accordingly.</p></li><li class="listitem"><p><span class="bold"><strong>tSortRow</strong></span>: it puts the input records in a
					given order as means to create a clear view of the result of running this
					Job.</p></li><li class="listitem"><p>two <span class="bold"><strong>tLogRow</strong></span> components: they present the
					execution result of each <span class="bold"><strong>tMatchGroupHadoop</strong></span>
					component.</p></li></ul></div><p>To replicate this scenario, proceed as the following sections illustrate.</p><div class="section" title="Dropping and linking the components"><div class="titlepage"><div><div><h4 class="title"><a name="d0e62166"></a>Dropping and linking the components</h4></div></div></div><p>To do this, perform the following operations:</p><div class="procedure"><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Drop <span class="bold"><strong>tFixedFlowInput</strong></span>, two <span class="bold"><strong>tGenKey</strong></span> components, two <span class="bold"><strong>tMatchGroupHadoop</strong></span> components, <span class="bold"><strong>tMap</strong></span> and two <span class="bold"><strong>tLogRow</strong></span>
						components from <span class="bold"><strong>Palette</strong></span> onto the design
						workspace.</p><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>A component used in the workspace can be labelled the way you need. In
							this scenario, this input component is labelled
								<span class="emphasis"><em>incoming_customers</em></span> for <span class="bold"><strong>tFixedFlowInput</strong></span>. For further information about how to
							label a component, see <span class="bluebold">Talend Enterprise Studio</span>
							<span class="bold"><strong>User Guide</strong></span></p></td></tr></table></div></li><li class="step" title="Step 2"><p>Right-click <span class="bold"><strong>tFixedFlowInput</strong></span> to open its
						contextual menu and select the <span class="bold"><strong>Row</strong></span> &gt;
							<span class="bold"><strong>Main</strong></span> link from this menu to connect
						this component to the first <span class="bold"><strong>tGenKey</strong></span>
						(labeled <span class="italic">lname_postcode</span>).</p></li><li class="step" title="Step 3"><p>Do the same to create the <span class="bold"><strong>Main</strong></span> link from
						the first <span class="bold"><strong>tGenKey</strong></span> to <span class="bold"><strong>tMap</strong></span>, then to the second <span class="bold"><strong>tGenkey</strong></span> (labeled <span class="italic">lname_initial</span>) naming the output link as <span class="italic">out</span>, to the first <span class="bold"><strong>tMatchGroupHadoop</strong></span>, to the first <span class="bold"><strong>tLogRow</strong></span> and then to the second <span class="bold"><strong>tMatchGroupHadoop</strong></span> and finally to the second <span class="bold"><strong>tLogRow</strong></span>.</p></li></ol></div><p>The components to be used in this scenario are all placed and linked. Then you
				need continue to configure them successively. </p></div><div class="section" title="Configuring the input flow"><div class="titlepage"><div><div><h4 class="title"><a name="d0e62261"></a>Configuring the input flow</h4></div></div></div><p>To do this, proceed as follows:</p><div class="procedure" title="Procedure&nbsp;5.1.&nbsp;Setting up the input data"><a name="d0e62266"></a><p class="title"><b>Procedure&nbsp;5.1.&nbsp;Setting up the input data</b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Double-click <span class="bold"><strong>tFixedFlowInput</strong></span> to open its
							<span class="bold"><strong>Component</strong></span> view.</p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-inputflow.png" align="middle"></div></li><li class="step" title="Step 2"><p> Click the three-dot button next to <span class="bold"><strong>Edit
							schema</strong></span> to open the schema editor.</p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-input_schema.png" align="middle"></div></li><li class="step" title="Step 3"><p>Click the plus button eight times to add eight rows. They are the eight
						columns of the schema of the input data.</p></li><li class="step" title="Step 4"><p>Rename these eight rows respectively. In this example, they are: <span class="italic">account_num</span>, <span class="italic">lname</span>, <span class="italic">fname</span>, <span class="italic">mi</span>, <span class="italic">address1</span>, <span class="italic">city</span>, <span class="italic">state_province</span>, <span class="italic">postal_code</span>.</p></li><li class="step" title="Step 5"><p>In the <span class="bold"><strong>Type</strong></span> column, select the data types
						for the rows of interest. In this example, select <span class="bold"><strong>Long</strong></span> for the <span class="italic">account_num</span>
						column.</p></li><li class="step" title="Step 6"><p>Click <span class="bold"><strong>OK</strong></span> to validate these changes and
						accept the propagation prompted by the pop-up dialog box.</p></li><li class="step" title="Step 7"><p>In the <span class="bold"><strong>Mode</strong></span> area of the <span class="bold"><strong>Basic settings</strong></span> view, select <span class="bold"><strong>Use Inline Content (delimited file)</strong></span> to enter the input data
						of interest.</p></li><li class="step" title="Step 8"><p>In the <span class="bold"><strong>Content</strong></span> field, enter or paste the
						input data to be processed. This data should correspond to the schema you
						have defined. The customer records used in this example are provided by the
						demo Job <span class="italic">D4_hadoop_group_family_multipass</span>
						that you could import along with the demo DQ project. For further
						information about how to import a project, see <span class="bluebold">Talend Enterprise Studio</span>
						<span class="bold"><strong>User Guide</strong></span>.</p></li></ol></div><div class="procedure" title="Procedure&nbsp;5.2.&nbsp;Configuring the key generation for the first pass"><a name="d0e62366"></a><p class="title"><b>Procedure&nbsp;5.2.&nbsp;Configuring the key generation for the first pass</b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Double-click the first <span class="bold"><strong>tGenKey</strong></span> (labelled
							<span class="italic">lname_postcode</span>) to open the <span class="bold"><strong>Component</strong></span> view. </p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-genkey1.png" align="middle"></div></li><li class="step" title="Step 2"><p>Under the <span class="bold"><strong>Algorithm</strong></span> table, click the plus
						button to add two rows in this table.</p></li><li class="step" title="Step 3"><p>On the <span class="bold"><strong>column</strong></span> column, click the newly
						added row and select from the list the column you want to process using an
						algorithm. In this example, select <span class="emphasis"><em>lname</em></span>.</p></li><li class="step" title="Step 4"><p>Do the same on the second row to select
						<span class="emphasis"><em>postal_code</em></span></p></li><li class="step" title="Step 5"><p>On the <span class="bold"><strong>pre-algorithm</strong></span> column, click the
						newly added row and select from the list the pre-algorithm you want to apply
						to the corresponding column. In this example, select <span class="bold"><strong>remove diacritical marks and upper case</strong></span> to remove any
						diacritical mark and converts the fields of the <span class="italic">lname</span> column to upper case before generating the code of
						this column.</p><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>This conversion does not change your raw data.</p></td></tr></table></div></li><li class="step" title="Step 6"><p>On the <span class="bold"><strong>algorithm</strong></span> column, click the newly
						added row and select from the list the algorithm you want to apply to the
						corresponding column. In this example, select <span class="bold"><strong>N first
							characters of each word</strong></span>.</p></li><li class="step" title="Step 7"><p>Do the same for the second row on the <span class="bold"><strong>algorithm</strong></span> column to select <span class="bold"><strong>first N
							characters of the string</strong></span>.</p></li><li class="step" title="Step 8"><p>Click in the <span class="bold"><strong>Value</strong></span> column next to the
							<span class="bold"><strong>algorithm</strong></span> column and enter the value
						for the selected algorithm, when needed. In this scenario, type in
							<span class="emphasis"><em>1</em></span> for both of the rows, meaning that the first
						letter of each field in the corresponding columns will be used to generate
						the keys.</p></li></ol></div><div class="procedure" title="Procedure&nbsp;5.3.&nbsp;Indexing the generated keys column of interest"><a name="d0e62449"></a><p class="title"><b>Procedure&nbsp;5.3.&nbsp;Indexing the generated keys column of interest</b></p><p>You need to index the column of the generated keys incoming from the first
						<span class="bold"><strong>tGenKey</strong></span> component. To do this, proceed as
					follows:</p><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Double-click <span class="bold"><strong>tMap</strong></span> to open its
						editor</p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-tmap.png" align="middle"></div></li><li class="step" title="Step 2"><p>On the input side (left) of the upper part, select all of the input
						columns by, for example, clicking any of them and pressing <span class="bold"><strong>Ctrl+A</strong></span> and drop them onto the output side
						(right). Thus the input and the output columns are mapped.</p></li><li class="step" title="Step 3"><p>On the output side (right) of the <span class="bold"><strong>Schema
							editor</strong></span> tab view on the lower part, click the <span class="italic">T_GEN_KEY</span> row in the <span class="bold"><strong>Column</strong></span> column and rename it as <span class="italic">T_GEN_KEY_1</span>. Thus this column is indexed.</p></li><li class="step" title="Step 4"><p>Click <span class="bold"><strong>OK</strong></span> to validate these changes and
						accept the propagation prompted by the pop-up dialog box.</p></li></ol></div><div class="procedure" title="Procedure&nbsp;5.4.&nbsp;Configuring the key generation for the second pass"><a name="d0e62493"></a><p class="title"><b>Procedure&nbsp;5.4.&nbsp;Configuring the key generation for the second pass</b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Double-click the second <span class="bold"><strong>tGenKey</strong></span> (labelled
							<span class="italic">lname_initial</span>) to open the <span class="bold"><strong>Component</strong></span> view. </p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-genkey2.png" align="middle"></div></li><li class="step" title="Step 2"><p>Under the <span class="bold"><strong>Algorithm</strong></span> table, click the plus
						button to add one row in this table.</p></li><li class="step" title="Step 3"><p>On the <span class="bold"><strong>column</strong></span> column, click the newly
						added row and select from the list the column you want to process using an
						algorithm. In this example, select <span class="emphasis"><em>account_num</em></span>.</p></li><li class="step" title="Step 4"><p>On the <span class="bold"><strong>algorithm</strong></span> column, click the newly
						added row and select from the list the algorithm you want to apply to the
						corresponding column. In this example, select <span class="bold"><strong>first N
							characters of the string</strong></span>.</p></li><li class="step" title="Step 5"><p>Click in the <span class="bold"><strong>Value</strong></span> column next to the
							<span class="bold"><strong>algorithm</strong></span> column and enter the value
						for the selected algorithm, when needed. In this scenario, type in
							<span class="emphasis"><em>1</em></span>, meaning that the first letter of each field in
						the corresponding column will be used to generate the required keys.</p></li></ol></div></div><div class="section" title="Configuring the two passes"><div class="titlepage"><div><div><h4 class="title"><a name="d0e62547"></a>Configuring the two passes</h4></div></div></div><p>You need to configure the two passes to group the input data with the help of the
				two columns of generated keys.</p><div class="procedure" title="Procedure&nbsp;5.5.&nbsp;Configuring the first pass"><a name="d0e62552"></a><p class="title"><b>Procedure&nbsp;5.5.&nbsp;Configuring the first pass</b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Double-click the first <span class="bold"><strong>tMatchGroupHadoop</strong></span>
						component (labelled <span class="italic">pass1</span>) to display the
							<span class="bold"><strong>Component</strong></span> view.</p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-pass1.png" align="middle"></div></li><li class="step" title="Step 2"><p>In the <span class="bold"><strong>Hadoop version</strong></span> field, select the
						available Hadoop system to be connected to.</p></li><li class="step" title="Step 3"><p>In the <span class="bold"><strong>Hadoop configuration</strong></span> area, enter
						the authentication information in the corresponding fields: <span class="bold"><strong>Host</strong></span>, <span class="bold"><strong>Port</strong></span> and
							<span class="bold"><strong>HDFS directory</strong></span>.</p></li><li class="step" title="Step 4"><p>In the <span class="bold"><strong>Key definition</strong></span> table, click the
						plus button to add to the list the columns on which you want to do the
						matching operation, <span class="italic">lname</span> in this
						scenario.</p></li><li class="step" title="Step 5"><p>Click in the first and second cells of the <span class="bold"><strong>Matching
							type</strong></span> column and select from the list the method(s) to be used
						for the matching operation, <span class="emphasis"><em>Jaro-Winkler</em></span> in this
						example.</p></li><li class="step" title="Step 6"><p>Click the plus button below the <span class="bold"><strong>Blocking
							Definition</strong></span> table to add one row in the table then click in
						the line and select from the list the column you want to use as a blocking
						value, <span class="italic">T_GEN_KEY_1</span> in this example. </p><p>Using a blocking value reduces the number of pairs of records that needs
						to be examined. The input data is partitioned into exhaustive blocks based
						on the functional key. This will decrease the number of pairs to compare, as
						comparison is restricted to record pairs within each block. </p></li></ol></div><div class="procedure" title="Procedure&nbsp;5.6.&nbsp;Configuring the second pass"><a name="d0e62620"></a><p class="title"><b>Procedure&nbsp;5.6.&nbsp;Configuring the second pass</b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Double-click the second <span class="bold"><strong>tMatchGroupHadoop</strong></span>
						component (labelled <span class="italic">pass2</span>) to display the
							<span class="bold"><strong>Component</strong></span> view.</p><div class="mediaobject" align="center"><img src="../images/tmatchgroupHadoop-pass2.png" align="middle"></div></li><li class="step" title="Step 2"><p>Select the <span class="bold"><strong>Link with a tMatchGroupHadoop</strong></span>
						check box to reuse the connection to the given Hadoop system you have set in
						the previous <span class="bold"><strong>tMatchGroupHadoop</strong></span>.</p></li><li class="step" title="Step 3"><p>In the <span class="bold"><strong>Key definition</strong></span> table, click the
						plus button to add to the list the columns on which you want to do the
						matching operation, <span class="italic">lname</span> in this
						scenario.</p></li><li class="step" title="Step 4"><p>Click in the cell of the <span class="bold"><strong>Matching type</strong></span>
						column and select from the list the method(s) to be used for the matching
						operation, <span class="italic">Jaro-Winkler</span> in this
						example.</p></li><li class="step" title="Step 5"><p>Click the plus button below the <span class="bold"><strong>Blocking
							Definition</strong></span> table to add one row in the table then click in
						the row and select from the list the column you want to use as a blocking
						value, <span class="italic">T_GEN_KEY</span> in this example. This
						way, the matching operation is performed only between the master records
						with the same key, in this example, the same initial character of the
						account numbers. </p><p>Through this pass, this Job processes the matching groups provided by the
						previous <span class="bold"><strong>tMatchGroupHadoop</strong></span>. It selects the
						groups with one single record to compare with the other master records when
						both parts of them have the same generated key.</p></li></ol></div><div class="procedure" title="Procedure&nbsp;5.7.&nbsp;Sorting the input records"><a name="d0e62679"></a><p class="title"><b>Procedure&nbsp;5.7.&nbsp;Sorting the input records</b></p><ol class="procedure" type="1"><li class="step" title="Step 1"><p>Double-click <span class="bold"><strong>tSortRow</strong></span> to open its
							<span class="bold"><strong>Component</strong></span> view.</p><div class="mediaobject" align="center"><img src="../images/tmatchgrouphadoop-sortrow.png" align="middle"></div></li><li class="step" title="Step 2"><p>Under the <span class="bold"><strong>Criteria</strong></span> table, click the plus
						button twice to add two rows.</p></li><li class="step" title="Step 3"><p>In the first row, select <span class="italic">GID</span> for the
							<span class="bold"><strong>Schema column</strong></span> column, <span class="italic">alpha</span> for the <span class="bold"><strong>Sort num or
							alpha</strong></span> column and <span class="italic">asc</span> for
						the <span class="bold"><strong>Order asc or desc</strong></span> column. This means
						that the sorting is performed on the <span class="italic">GID</span>
						column of the input schema, ascendingly in terms of its alphabetical order.
						Thus the other columns are sorted accordingly.</p></li><li class="step" title="Step 4"><p>Do the same to select <span class="italic">GRP_SIZE</span>,
							<span class="italic">num</span> and <span class="italic">desc</span> accordingly in the second row.</p></li></ol></div><p>Then you can run this Job.</p><p>The <span class="bold"><strong>tLogRow</strong></span> component is used to present the
				execution result of the Job. You can configure the presentation mode on its
					<span class="bold"><strong>Component</strong></span> view.</p><p>To do this, double-click the <span class="bold"><strong>tLogRow</strong></span> component of
				interest to open the <span class="bold"><strong>Component</strong></span> view and in the
					<span class="bold"><strong>Mode</strong></span> area, select the <span class="bold"><strong>Table (print values in cells of a table)</strong></span> check box.</p><p>To execute this Job, press <span class="bold"><strong>F6</strong></span>. </p><p>Once done, the <span class="bold"><strong>Run</strong></span> view is opened automatically,
				where you can check the execution result.</p><p>The result after the first pass reads as follows:</p><div class="mediaobject" align="center"><img src="../images/tmatchgrouphadoop_multipass1.png" align="middle"></div><p>The result after the second pass reads as follows:</p><div class="mediaobject" align="center"><img src="../images/tmatchgrouphadoop_multipass2.png" align="middle"></div><div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>For the reason of page space, the results are not totally presented.</p></td></tr></table></div><p>When you compare, for example, the customer name <span class="italic">Alexander</span> from the results of the two passes, you will find that
				more customers using the last name <span class="italic">Alexander</span> are
				grouped together after the second pass:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the first pass, <span class="italic">Jeremy Alexander</span>,
							<span class="italic">Bob Alexander</span> and <span class="italic">Maxine Alexander</span> are not distributed in the
						same group because the matching is performed only within each block defined
						in the <span class="italic">T_GEN_KEY_1</span> column while they
						belong to different blocks, A9, A8 and A3 respectively.</p></li><li class="listitem"><p>In the second pass, the matching to be performed uses the blocks defined
						in the <span class="italic">T_GEN_KEY</span> column. As all of the
						three customer names belong to block <span class="italic">2</span>,
						thus they are grouped together after computing the distance in between. In
						addition, you can as well read, from the <span class="italic">MASTER</span> column, that <span class="italic">Jeremy
							Alexander</span> is the master record of its group. </p></li></ul></div></div></div></div></body></html>