<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tMysqlOutputBulk</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Open Studio"><link rel="up" href="Raa29876.html" title="Chapter&nbsp;6.&nbsp;Database components"><link rel="prev" href="tMysqlOutput.html" title="tMysqlOutput"><link rel="next" href="tMysqlOutputBulkExec.html" title="tMysqlOutputBulkExec"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tMysqlOutputBulk"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tMysqlOutputBulk"></a>tMysqlOutputBulk</h2></div></div></div><div class="mediaobject"><img src="../images/tMysqlOutputBulk_icon32_white.png"></div><a name="Xaa2751853"></a><div class="section" title="tMysqlOutputBulk properties"><div class="titlepage"><div><div><h3 class="title"><a name="Raa59709"></a>tMysqlOutputBulk properties</h3></div></div></div><p>The <span class="bold"><strong>tMysqlOutputBulk</strong></span> and <span class="bold"><strong>tMysqlBulkExec</strong></span> components are used together in a two
					step process. In the first step, an output file is generated. In the second
					step, this file is used in the INSERT statement used to feed a database. These
					two steps are fused together in the <span class="bold"><strong>tMysqlOutputBulkExec</strong></span> component, detailed in a separate section.
					The advantage of using two separate steps is that the data can be transformed
					before it is loaded in the database. </p><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p><span class="bold"><strong>Component famil</strong></span>y</p>
								</td><td valign="top">
									<p>Databases/MySQL</p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>Writes a file with columns based on the defined delimiter
										and the MySql standards </p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>Prepares the file to be used as parameter in the INSERT
										query to feed the MySQL database.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Property type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: No property
										data stored centrally.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										repository file in which the properties are stored. The
										fields that follow are completed automatically using the
										data retrieved.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>File Name</em></span>
									</p>
								</td><td valign="top">
									<p>Name of the file to be processed. </p>
									<p> Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span></p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Append</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to add the new rows at the end of
										the file</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											Schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields to be processed and passed on to the next
										component. The schema is either <span class="bold"><strong>Built-in</strong></span> or stored remotely in the <span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: The schema will
										be created and stored locally for this component only.
										Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: The schema
										already exists and is stored in the Repository, hence can be
										reused in various projects and job designs. Related topic:
										see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Advanced settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Row separator</em></span>
									</p>
								</td><td valign="top">
									<p>String (ex: "\n" on Unix) to distinguish rows.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Field separator</em></span>
									</p>
								</td><td valign="top">
									<p>Character, string or regular expression to separate
										fields.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Text enclosure</em></span>
									</p>
								</td><td valign="top">
									<p>Character used to enclose the text.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Create directory if does not exist</em></span>
									</p>
								</td><td valign="top">
									<p>This check box is selected by default. It creates a
										directory to hold the output table if required.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Custom the flush buffer size</em></span>
									</p>
								</td><td valign="top">
									<p>Customize the amount of memory used to temporarily store
										output data. In the <span class="bold"><strong>Row number
											field</strong></span>, enter the number of rows after which
										the memory is to be freed again.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Records contain NULL value</em></span>
									</p>
								</td><td valign="top">
									<p>This check box is selected by default. It allows you to
										take account of NULL value fields. If you clear the check
										box, the NULL values will automatically be replaced with
										empty values.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Check disk space</em></span>
									</p>
								</td><td valign="top">
									<p>Select the this check box to throw an exception during
										execution if the disk is full.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Encoding</em></span>
									</p>
								</td><td valign="top">
									<p>Select the encoding from the list or select <span class="bold"><strong>Custom</strong></span> and define it manually.
										This field is compulsory for DB data handling.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>tStatCatcher Statistics</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to collect the log data at the
										component level.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component is to be used along with <span class="bold"><strong>tMySQlBulkExec</strong></span> component. Used
										together they offer gains in performance while feeding a
										MySQL database.</p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario: Inserting transformed data in MySQL database"><div class="titlepage"><div><div><h3 class="title"><a name="Raa15985"></a>Scenario: Inserting transformed data in MySQL database</h3></div></div></div><p>This scenario describes a four-component job which aims at fueling a database
					with data contained in a file, including transformed data. Two steps are
					required in this job, first step is to create the file, that will then be used
					in the second step. The first step includes a tranformation phase of the data
					included in the file.</p><div class="mediaobject"><img src="../images/Use_Case_tMysqlOB_BE1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Drag and drop a <span class="bold"><strong>tRowGenerator</strong></span>, a
								<span class="bold"><strong>tMap</strong></span>, a <span class="bold"><strong>tMysqlOutputBulk</strong></span> as well as a <span class="bold"><strong>tMysqlBulkExec</strong></span> component.</p></li><li class="listitem"><p> Connect the main flow using <span class="bold"><strong>row Main</strong></span>
							links.</p></li><li class="listitem"><p> And connect the start component (<span class="bold"><strong>tRowgenerator</strong></span> in this example) to the <span class="bold"><strong>tMysqlBulkExec</strong></span> using a <span class="bold"><strong>trigger</strong></span> connection, of type <span class="bold"><strong>OnComponentOk</strong></span>.</p></li><li class="listitem"><p> A <span class="bold"><strong>tRowGenerator</strong></span> is used to generate
							random data. Double-click on the <span class="bold"><strong>tRowGenerator
							</strong></span>component to launch the editor.</p></li><li class="listitem"><p> Define the schema of the rows to be generated and the nature of data
							to generate. In this example, the <span class="emphasis"><em>clients</em></span> file to
							be produced will contain the following columns: <span class="emphasis"><em>ID</em></span>,
								<span class="emphasis"><em>First Name</em></span>, <span class="emphasis"><em>Last Name</em></span>,
								<span class="emphasis"><em>Address</em></span>, <span class="emphasis"><em>City</em></span> which all
							are defined as string data but the ID that is of integer type.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlOB_BE2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Some schema information don&#8217;t necessarily need to be displayed. To
							hide them away, click on <span class="bold"><strong>Columns</strong></span> list
							button next to the toolbar, and uncheck the relevant entries, such as
								<span class="bold"><strong>Precision</strong></span> or <span class="bold"><strong>Parameters</strong></span>.</p></li><li class="listitem"><p> Use the plus button to add as many columns to your schema
							definition.</p></li><li class="listitem"><p> Click the Refresh button to preview the first generated row of your
							output.</p></li><li class="listitem"><p> Then select the <span class="bold"><strong>tMap</strong></span> component to
							set the transformation.</p></li><li class="listitem"><p> Drag and drop all columns from the input table to the output table.
						</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlOB_BE3.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Apply the transformation on the <span class="emphasis"><em>LastName</em></span> column
							by adding <code class="code">.toUpperCase()</code> in its expression field.</p></li><li class="listitem"><p> Click <span class="bold"><strong>OK</strong></span> to validate the
							transformation.</p></li><li class="listitem"><p> Then double-click on the <span class="bold"><strong>tMysqlOutputBulk</strong></span> component.</p></li><li class="listitem"><p> Define the name of the file to be produced in <span class="bold"><strong>File Name</strong></span> field. If the delimited file information is
							stored in the <span class="bold"><strong>Repository</strong></span>, select it in
								<span class="bold"><strong>Property Type</strong></span> field, to retrieve
							relevant data. In this use case the file name is
								<span class="emphasis"><em>clients.txt</em></span>.</p></li><li class="listitem"><p> The schema is propagated from the <span class="bold"><strong>tMap</strong></span> component, if you accepted it when prompted.
						</p></li><li class="listitem"><p> In this example, don&#8217;t include the header information as the table
							should already contain it.</p></li><li class="listitem"><p> The encoding is the default one for this use case.</p></li><li class="listitem"><p> Click OK to validate the output.</p></li><li class="listitem"><p> Then double-click on the <span class="bold"><strong>tMysqlBulkExec</strong></span> component to set the INSERT query to be
							executed.</p></li><li class="listitem"><p> Define the database connection details. We recommend you to store
							this type of information in the <span class="bold"><strong>Repository</strong></span>, so that you can retrieve them at any time
							for any job.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlOB_BE4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Set the table to be filled in with the collected data, in the
								<span class="bold"><strong>Table </strong></span>field.</p></li><li class="listitem"><p> Fill in the column delimiters in the <span class="bold"><strong>Field
								terminated by</strong></span> area.</p></li><li class="listitem"><p> Make sure the encoding corresponds to the data encoding.</p></li><li class="listitem"><p> Then press <span class="bold"><strong>F6</strong></span> to run the job.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tMysqlOB_BE5.png"></div><p>The <span class="emphasis"><em>clients</em></span> database table is filled with data from the
					file including upper-case <span class="emphasis"><em>last name</em></span> as transformed in the
					job.</p><p>For simple Insert operations that don&#8217;t include any transformations, the use
					of <span class="bold"><strong>tMysqlOutputBulkExec</strong></span> allows you to skip a
					step in the process and thus improves performance. </p><p>Related topic: <a class="xref" href="tMysqlOutputBulkExec.html#Raa16582" title="tMysqlOutputBulkExec properties">the section called &#8220;tMysqlOutputBulkExec properties&#8221;</a></p></div></div></body></html>