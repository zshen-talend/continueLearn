<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tWebServiceInput</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Open Studio"><link rel="up" href="ch11.html" title="Chapter&nbsp;11.&nbsp;Internet components"><link rel="prev" href="tSOAP.html" title="tSOAP"><link rel="next" href="tXMLRPCInput.html" title="tXMLRPCInput"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tWebServiceInput"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tWebServiceInput"></a>tWebServiceInput</h2></div></div></div><div class="mediaobject"><img src="../images/tWebServiceInput_icon32.png"></div><div class="section" title="tWebServiceInput Properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e230597"></a>tWebServiceInput Properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p>
										<span class="bold"><strong>Component family</strong></span>
									</p>
								</td><td valign="top">
									<p>Internet </p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>Calls the defined method from the invoked Web service, and
										returns the class as defined, based on the given
										parameters.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>Invokes a Method through a Web service.</p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>To handle complex hierarchical data, use the advanced
											features of <span class="bold"><strong>tWebServiceInput</strong></span> and provide Java code
											directly in the <span class="bold"><strong>Code</strong></span>
											field of the <span class="bold"><strong>Advanced
												Settings</strong></span> view.</p></td></tr></table></div>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Property type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: No property
										data stored centrally.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										Repository file where the properties are stored. The fields
										that follow are completed automatically using the data
										retrieved.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<div class="mediaobject"><img src="../images/Save_Icon.png"></div>
								</td><td valign="top">
									<p>Click this icon to open a WSDL schema wizard and store
										your WSDL connection in the <span class="bold"><strong>Repository</strong></span> tree view.</p>
									<p> For more information about setting up and storing
										database connection parameters, see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											Schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields that will be processed and passed on to the next
										component. The schema is either built-in or remote in the
										Repository. </p>
									<p> Click <span class="bold"><strong>Edit Schema</strong></span> to
										make changes to the schema. Note that if you make changes,
										the schema automatically becomes built-in. </p>
									<p> Click <span class="bold"><strong>Sync columns</strong></span> to
										retrieve the schema from the previous component in the
										Job.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: You create the
										schema and store it locally for the relevant component.
										Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: You have
										already created the schema and stored it in the Repository.
										You can reuse it in various projects and job flowcharts.
										Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>WSDL</em></span>
									</p>
								</td><td valign="top">
									<p>Description of Web service bindings and
										configuration.</p>
								</td></tr><tr><td valign="top">&nbsp;</td><td valign="top">
									<p>
										<span class="emphasis"><em>Need authentication / Username and
											Password</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box and:</p>
									<p> -enter a username and a password in the corresponding
										fields if this is necessary to access the service.
										Or,</p>
									<p> -select the <span class="bold"><strong>Windows
											authentication</strong></span> check box and enter the
										windows domain in the corresponding field if this is
										necessary to access the service.</p>
								</td></tr><tr><td valign="top">&nbsp;</td><td valign="top">
									<p>
										<span class="emphasis"><em>Use http proxy</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box if you are using a proxy server and
										fill in the necessary information.</p>
								</td></tr><tr><td valign="top">&nbsp;</td><td valign="top">
									<p>
										<span class="emphasis"><em>Trust server with SSL</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to validate the server certificate
										to the client via an SSL protocol and fill in the
										corresponding fields:</p>
									<p>
										<span class="bold"><strong>TrustStore file</strong></span>: enter the
										path (including filename) to the certificate TrustStore file
										that contains the list of certificates that the client
										trusts.</p>
									<p>
										<span class="bold"><strong>TrustStore password</strong></span>: enter
										the password used to check the integrity of the TrustStore
										data. </p>
								</td></tr><tr><td valign="top">&nbsp;</td><td valign="top">
									<p>
										<span class="emphasis"><em>Time out (second)</em></span>
									</p>
								</td><td valign="top">
									<p>Set a value in seconds for Web service connection time
										out.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Method Name</em></span>
									</p>
								</td><td valign="top">
									<p>Enter the exact name of the Method to be invoked. </p>
									<p> The Method name MUST match the corresponding method
										described in the Web Service. The Method name is also
										case-sensitive. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Parameters</em></span>
									</p>
								</td><td valign="top">
									<p>Enter the parameters expected and the sought values to be
										returned. Make sure that the parameters entered fully match
										the names and the case of the parameters described in the
										method.</p>
								</td></tr><tr><td valign="top">&nbsp;</td><td valign="top">
									<p>
										<span class="emphasis"><em>Advanced Use</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to display the fields dedicated for
										the advanced use of<span class="bold"><strong>
											tWebServiceInput</strong></span>:</p>
									<p>
										<span class="bold"><strong>WSDL2java</strong></span>: click the
										three-dot button to generate <span class="bold"><strong>Talend</strong></span> routines that hold the Java
										code necessary to connect and query the Web service.</p>
									<p>
										<span class="bold"><strong>Code</strong></span>: replace the generated
										model Java code with the code necessary to connect and query
										the specified Web service using the code in the generated
											<span class="bold"><strong>Talend</strong></span>
										routines.</p>
									<p>
										<span class="bold"><strong>Match Brackets</strong></span>: select the
										number of brackets to be used to close the <code class="code">for</code>
										loop based on the number of open brackets.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>tStatCatcher Statistics</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to gather the Job processing
										metadata at a Job level as well as at each component
										level.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component is generally used as a Start component. It
										must be linked to an output component.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Limitation</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>n/a</p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario 1: Extracting images through a Web service"><div class="titlepage"><div><div><h3 class="title"><a name="d0e231073"></a>Scenario 1: Extracting images through a Web service</h3></div></div></div><p>This scenario describes a two-component Job which uses a Web service method
					and displays the output on the <span class="bold"><strong>Run</strong></span> console
					view.</p><p>The method retrieves a full URL as an input string and returns a string array
					of images from a given Web page.</p><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Drop a <span class="bold"><strong>tWebServiceInput</strong></span> component and
							a <span class="bold"><strong>tLogRow</strong></span> component from the <span class="bold"><strong>Palette</strong></span> onto the design workspace.</p></li><li class="listitem"><p>On the <span class="bold"><strong>Component</strong></span> view of the
								<span class="bold"><strong>tWebServiceInput</strong></span> component, define
							the WSDL specifications, such as <span class="bold"><strong>End Point
								URI</strong></span>, <span class="bold"><strong>WSDL</strong></span> and <span class="bold"><strong>SOAPAction URI</strong></span> where required.</p></li><li class="listitem"><p>If the Web service you invoke requires authentication details, select
							the <span class="bold"><strong>Need authentication</strong></span> check box and
							provide the relevant authentication information.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>If you are using a proxy server, select the <span class="bold"><strong>Use
								http proxy</strong></span> check box and enter the necessary connection
							information.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Method Name</strong></span> field, enter the
							method name as defined in the Web Service description. The name and the
							case of the method entered must match the corresponding Web service
							method exactly. </p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Parameters</strong></span> area, click the
							plus <span class="bold"><strong>[+]</strong></span> button to add a row to the
							table, then enter the exact name of the parameters which correspond to
							the method.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Value</strong></span> column, type in the URL
							of the Website that the images are to be extracted from.</p></li><li class="listitem"><p>Link the <span class="bold"><strong>tWebServiceInput</strong></span> component
							to the standard output component, <span class="bold"><strong>tLogRow</strong></span>. </p></li><li class="listitem"><p>Then save your Job and press <span class="bold"><strong>F6</strong></span> to
							execute it.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput3.png"></div><p>All of the images extracted from the Web site are returned as a list of URLs
					on the <span class="bold"><strong>Run</strong></span> view.</p></div><div class="section" title="Scenario 2: Reading the data published on a Web service using the tWebServiceInput advanced features"><div class="titlepage"><div><div><h3 class="title"><a name="d0e231181"></a>Scenario 2: Reading the data published on a Web service using the
					tWebServiceInput advanced features</h3></div></div></div><p>This scenario describes a two-component Job that retrieves a list of funds
					published by a financial Web service (distributed by <span class="webblue">www.xignite.com</span>) and displays the output on the standard console
					(the <span class="bold"><strong>Run</strong></span> view).</p><p>This scenario is designed for advanced users with basic knowledge of Java.
					Since the aim of this Job is to retrieve complex hierarchical data, you need to
					code the necessary functions in Java.</p><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Drop the following components from the <span class="bold"><strong>Palette</strong></span> onto the design workspace: <span class="bold"><strong>tWebServiceInput</strong></span> and <span class="bold"><strong>tLogRow</strong></span>.</p></li><li class="listitem"><p>Link the two components together using a <span class="bold"><strong>Row
								Main </strong></span>connection.</p></li><li class="listitem"><p>Double-click <span class="bold"><strong>tWebServiceInput</strong></span> to show
							the <span class="bold"><strong>Component </strong></span>view and set the
							component properties: </p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput2-2.png"></div><p>In the <span class="bold"><strong>Basic settings</strong></span> view:</p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Property Type</strong></span> list, select
								<span class="bold"><strong>Built-in</strong></span> and complete the fields
							that follow manually. </p></li><li class="listitem"><p>In the <span class="bold"><strong>Schema Type</strong></span> list, select
								<span class="bold"><strong>Built-in</strong></span> and click the <span class="bold"><strong>[...] </strong></span>button to configure the data structure
							(schema) manually, as shown in the figure below:</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput2-3.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Click <span class="bold"><strong>OK</strong></span> to validate the schema and
							close the window.</p><p> A dialog box opens and asks you if you want to propagate the
							modifications.</p></li><li class="listitem"><p>Click <span class="bold"><strong>Yes</strong></span>. </p></li><li class="listitem"><p>In the <span class="bold"><strong>WSDL</strong></span> field, enter the URL from
							which to get the WSDL.</p></li><li class="listitem"><p>In the <span class="bold"><strong>Time out</strong></span> field, enter the
							desired duration of the Web Service connection.</p></li><li class="listitem"><p>Click the <span class="bold"><strong>Advanced settings</strong></span> tab to
							display the corresponding view where you can set the <span class="bold"><strong>tWebServiceInput</strong></span> advanced features:</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput2-5.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Select the check box next to <span class="bold"><strong>Advanced
								Use</strong></span> to display the advanced configuration fields.</p></li><li class="listitem"><p>Click the <span class="bold"><strong>[...]</strong></span> button next to the
								<span class="bold"><strong>WSDL2Java</strong></span> field in order to
							generate routines from the WSDL Web service.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput2-4.png"></div><p>The routines generated display automatically under <span class="bold"><strong>Code
						&gt; Routines</strong></span> in the <span class="bold"><strong>Repository
					</strong></span>tree view. These routines can thus easily be called in the code to
					build the function required to fetch complex hierarchical data from the Web
					Service. </p><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>Enter the relevant function in the <span class="bold"><strong>Code
							</strong></span>field. By default, two examples of code are provided in the
							Code field. The first example returns one piece of data, and the second
							example returns several.</p></li><li class="listitem"><p>In this scenario, several data are to be returned. Therefore, remove
							the first example of code and use the second example of code to build
							the function. </p></li><li class="listitem"><p>Replace the pieces of code provided as examples with the relevant
							routines that have been automatically generated from the WSDL.</p></li><li class="listitem"><p>Change <code class="code">TalendJob_PortType</code> to the routine name ending
							with <span class="bold"><strong>_Port_Type</strong></span>, such as:
								<code class="code">XigniteFundHoldingsSoap_PortType</code>.</p></li><li class="listitem"><p>Replace the various instances of <code class="code">TalendJob</code> with a more
							relevant name such as the name of the method in use. In this use case:
								<span class="emphasis"><em>fundHolding</em></span></p></li><li class="listitem"><p>Replace <code class="code">TalendJobServiceLocator</code> with the name of the
							routine ending with <span class="bold"><strong>Locator</strong></span>, such as:
								<code class="code">XigniteFundHoldingLocator</code>.</p></li><li class="listitem"><p>Replace both instances of <code class="code">TalendJobSoapBindingStub</code>
							with the routine name ending with <span class="bold"><strong>BindingStub</strong></span>, such as:
								<code class="code">XigniteFundHoldingsSoap_BindingStub</code>.</p></li><li class="listitem"><p>Within the brackets corresponding to the pieces of code:
							stub.setUsername and stub.setPassword, enter your username and password
							respectively, between quotes.</p><p> For the sake of confidentiality or maintenance, you can store your
							username and password in context variables.</p></li><li class="listitem"><p>The list of funds provided by the <span class="emphasis"><em>Xignite</em></span> Web
							service is identified using so-called &#8220;<span class="emphasis"><em>symbols</em></span>&#8221;,
							which are of string type. In this example, we intend to fetch the list
							of funds of which the symbol is between &#8220;I&#8221; and &#8220;J&#8221;. To do so, define
							the following statements: <code class="code">string startSymbol=&#8220;I&#8221;</code> and
								<code class="code">string endSymbol=&#8220;J&#8221;</code>.</p></li><li class="listitem"><p>Then enter the piece of code to create the result table showing the
							list of funds (<span class="bold"><strong>listFunds</strong></span>) of funds
							holdings using the statements defined earlier on: <code class="code">routines.Fund[]
								result = fundHoldings.listFunds(startSymbol,
							endSymbol);</code></p></li><li class="listitem"><p>Run a loop on the fund list to fetch the funds ranging from &#8220;I&#8221; to
							&#8220;J&#8221;: <code class="code">for(int i = 0; i &lt; result.length; i++) {</code>.</p></li><li class="listitem"><p>Define the results to return, for example: fetch the <span class="bold"><strong>CIK</strong></span> data from the <span class="bold"><strong>Security</strong></span> schema using the code
								<code class="code">getSecurity().getCIK()</code>, then pass them on to the
								<span class="bold"><strong>CIK</strong></span> output schema.</p></li></ul></div><p>The function that operates the Web service should read as follows:</p><p>
					</p><pre class="programlisting">routines.XigniteFundHoldingsSoap_PortType
fundHoldings = new routines.XigniteFundHoldingsLocator().getXigniteFundHoldingsSoap(
);
        
routines.XigniteFundHoldingsSoap_BindingStub
stub = (routines.XigniteFundHoldingsSoap_BindingStub)fundHoldings;
        
stub.setUsername(&#8220;identifiant&#8221;);<span></span>
Stub.setPassword(&#8220;mot de passe&#8221;);
        
String startSymbol="I";<span></span>
String endSymbol="J";
        
routines.Fund[ ] result = fundHoldings.listFunds(startSymbol,
endSymbol); for(int i = 0; i &lt; result.length; i++) {

output_row.CIK = (result[i]).getSecurity().getCIK();<span></span>
output_row.cusip = (result[i]).getSecurity().getCusip();<span></span>
output_row.symbol = (result[i]).getSecurity().getSymbol();<span></span>
output_row.ISIN = (result[i]).getSecurity().getISIN();<span></span>
output_row.valoren = (result[i]).getSecurity().getValoren();<span></span>
output_row.name = (result[i]).getSecurity().getName();<span></span>
output_row.market = (result[i]).getSecurity().getMarket();<span></span>
output_row.category =<span></span>
(result[i]).getSecurity().getCategoryOrIndustry();<span></span>
output_row.asOfDate = (result[i]).getAsOfDate(); </pre><p>
				</p><div class="warning" title="Warning" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Warning"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Warning]" src="../images/warning.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>
						<span class="emphasis"><em>The outputs defined in the Java function </em></span>
						<code class="code">
							<span>output_row.output</span>
						</code>
						<span class="emphasis"><em> must match the columns defined in the component schema exactly.
							The case used must also be matched in order for the data to be
							retrieved.</em></span>
					</p></td></tr></table></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p>In the <span class="bold"><strong>Match Brackets</strong></span> field, select
							the number of brackets to use to end the For loop, based on the number
							of open brackets. For this scenario, select one bracket only as only one
							bracket has been opened in the function.</p></li><li class="listitem"><p>Double-click the <span class="bold"><strong>tLogRow</strong></span> component to
							display the <span class="bold"><strong>Component</strong></span> view and set its
							parameters.</p></li><li class="listitem"><p>Click the <span class="bold"><strong>[...]</strong></span> button next to the
								<span class="bold"><strong>Edit Schema</strong></span> field in order to check
							that the preceding component schema was properly propagated to the
							output component. If needed, click the <span class="bold"><strong>Sync
								Columns</strong></span> button to retrieve the schema.</p></li><li class="listitem"><p>Save your Job and press <span class="bold"><strong>F6</strong></span> to run
							it.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tWebServiceInput2-6.png"></div><p>The funds comprised between &#8220;I&#8221; and &#8220;J&#8221; are returned and displayed in the
						<span class="bluebold">Talend Open Studio</span> console.</p></div></div></body></html>