<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>tSQLiteRow</title><meta name="generator" content="DocBook XSL-NS Stylesheets V1.76.1"><link rel="home" href="index.html" title="Talend Open Studio"><link rel="up" href="Raa29876.html" title="Chapter&nbsp;6.&nbsp;Database components"><link rel="prev" href="tSQLiteRollback.html" title="tSQLiteRollback"><link rel="next" href="tSybaseBulkExec.html" title="tSybaseBulkExec"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div lang="EN" class="section" title="tSQLiteRow"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="tSQLiteRow"></a>tSQLiteRow</h2></div></div></div><div class="mediaobject"><img src="../images/tSQLiteRow_icon32_white.png"></div><div class="section" title="tSQLiteRow Properties"><div class="titlepage"><div><div><h3 class="title"><a name="d0e152494"></a>tSQLiteRow Properties</h3></div></div></div><div class="informaltable"><table border="1"><colgroup><col class="c1"><col class="c2"><col class="c3"></colgroup><tbody><tr><td valign="top">
									<p>
										<span class="bold"><strong>Component family</strong></span>
									</p>
								</td><td valign="top">
									<p>Databases</p>
								</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Function</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p><span class="bold"><strong>tSQLiteRow</strong></span> executes the
										defined query onto the specified database and uses the
										parameters bound with the column.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Purpose</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>A prepared statement uses the input flow to replace the
										placeholders with the values for each parameters defined.
										This component can be very useful for updates.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Basic settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Property type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: No property
										data stored centrally.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										repository file in which the properties are stored. The
										fields that follow are completed automatically using the
										data retrieved.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Use an existing connection</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box and click the relevant <span class="bold"><strong>tSQLiteConnection </strong></span>component on
											the<span class="bold"><strong> Component list</strong></span> to
										reuse the connection details you already defined.</p>
									<p> </p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>When a Job contains the parent Job and the child Job,
												<span class="bold"><strong>Component list</strong></span>
											presents only the connection components in the same Job
											level, so if you need to use an existing connection from
											the other level, make sure that the available connection
											components are sharing the intended connection.</p><p>For more information on how to share a DB connection
											across Job levels, see <span class="bold"><strong>Use or
												register a shared DB connection</strong></span> in any
											database connection component corresponding to the
											database you are using.</p><p>Otherwise, you can as well deactivate the connection
											components and use <span class="bold"><strong>Dynamic
												settings</strong></span> of the component to specify the
											intended connection manually. In this case, make sure
											the connection name is unique and distinctive all over
											through the two Job levels. For more information about
												<span class="bold"><strong>Dynamic settings</strong></span>,
											see your studio user guide.</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="emphasis"><em>Schema</em></span> and <span class="emphasis"><em>Edit
											Schema</em></span></p>
								</td><td valign="top">
									<p>A schema is a row description, i.e., it defines the number
										of fields to be processed and passed on to the next
										component. The schema is either <span class="bold"><strong>Built-in</strong></span> or stored remotely in the <span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: The schema is
										created and stored locally for this component only. Related
										topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: The schema
										already exists and is stored in the Repository, hence can be
										reused. Related topic: see <span class="bluebold">Talend Open Studio</span>
										<span class="bold"><strong>User Guide</strong></span>.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Query type</em></span>
									</p>
								</td><td valign="top">
									<p>Either <span class="bold"><strong>Built-in</strong></span> or
											<span class="bold"><strong>Repository</strong></span>. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Built-in</strong></span>: Fill in
										manually the query statement or build it graphically using
										SQLBuilder</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p><span class="bold"><strong>Repository</strong></span>: Select the
										relevant query stored in the Repository. The Query field
										gets accordingly filled in.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Query</em></span>
									</p>
								</td><td valign="top">
									<p>Enter your DB query paying particularly attention to
										properly sequence the fields in order to match the schema
										definition. </p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Die on error</em></span>
									</p>
								</td><td valign="top">
									<p>Clear this check box to skip the row on error and complete
										the process for error-free rows. </p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Advanced settings</strong></span>
									</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Propagate QUERY&#8217;s recordset</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to insert the result of the query
										into a COLUMN of the current flow. Select this column from
										the <span class="bold"><strong>use column</strong></span> list.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Use PreparedStatement</em></span>
									</p>
								</td><td valign="top">
									<p>Select this checkbox if you want to query the database
										using a PreparedStatement. In the <span class="bold"><strong>Set
											PreparedStatement Parameter </strong></span>table, define the
										parameters represented by &#8220;?&#8221; in the SQL instruction of the
											<span class="bold"><strong>Query</strong></span> field in the
											<span class="bold"><strong>Basic Settings</strong></span>
										tab.</p>
									<p>
										<span class="bold"><strong>Parameter Index</strong></span>: Enter the
										parameter position in the SQL instruction.</p>
									<p>
										<span class="bold"><strong>Parameter Type</strong></span>: Enter the
										parameter type.</p>
									<p>
										<span class="bold"><strong>Parameter Value</strong></span>: Enter the
										parameter value.</p>
									<p> </p>
									<div class="note" title="Note" style="margin-left: 0.5in; margin-right: 0.5in;"><table border="0" summary="Note"><tr><td rowspan="2" align="center" valign="top" width="16pt"><img alt="[Note]" src="../images/note.png"></td><th align="left"></th></tr><tr><td align="left" valign="top"><p>This option is very useful if you need to execute the
											same query several times. Performance levels are
											increased</p></td></tr></table></div>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>Commit every</em></span>
									</p>
								</td><td valign="top">
									<p>Number of rows to be completed before committing batches
										of rows together into the DB. This option ensures
										transaction quality (but not rollback) and above all better
										performance on executions.</p>
								</td></tr><tr><td>
									<p>&nbsp;</p>
								</td><td valign="top">
									<p>
										<span class="emphasis"><em>tStat</em></span>
										<span class="emphasis"><em>Catcher Statistics</em></span>
									</p>
								</td><td valign="top">
									<p>Select this check box to collect log data at the component
										level.</p>
								</td></tr><tr><td valign="top">
									<p>
										<span class="bold"><strong>Usage</strong></span>
									</p>
								</td><td colspan="2" valign="top">
									<p>This component offers the flexibility of the DB query and
										covers all possible SQL queries.</p>
								</td></tr></tbody></table></div></div><div class="section" title="Scenario: Updating SQLite rows"><div class="titlepage"><div><div><h3 class="title"><a name="d0e152968"></a>Scenario: Updating SQLite rows</h3></div></div></div><p>This scenario describes a job which updates an SQLite database file based on a
					prepared statement and using a delimited file.</p><div class="mediaobject"><img src="../images/Use_Case_tSQLiteRow1.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Drop a <span class="bold"><strong>tFileInputDelimited</strong></span> and a
								<span class="bold"><strong>tSQLiteRow</strong></span> component from the
								<span class="bold"><strong>Palette</strong></span> to the design
							workspace.</p></li><li class="listitem"><p> On the <span class="bold"><strong>tFileInputDelimited</strong></span>
							<span class="bold"><strong>Basic settings </strong></span>panel, browse to the
							input file that will be used to update rows in the database.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLiteRow2.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> There is no <span class="bold"><strong>Header</strong></span> nor <span class="bold"><strong>Footer</strong></span>. The <span class="bold"><strong>Row
								separator</strong></span> is a carriage return and the <span class="bold"><strong>Field separator</strong></span> is a semi-colon. </p></li><li class="listitem"><p> Edit the schema in case it is not stored in the <span class="bold"><strong>Repository</strong></span>.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLiteRow3.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> Make sure the length and type are respectively correct and large
							enough to define the columns.</p></li><li class="listitem"><p> Then in the <span class="bold"><strong>tSQLiteRow</strong></span>
							<span class="bold"><strong>Basic settings</strong></span> panel, set the <span class="bold"><strong>Database</strong></span> filepath to the file to be
							updated.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLiteRow3_.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> The schema is read-only as it is required to match the input
							schema.</p></li><li class="listitem"><p> Type in the query or retrieve it from the Repository. In this use
							case, we updated the <span class="emphasis"><em>type_os</em></span> for
								the&nbsp;<span class="emphasis"><em>id</em></span> defined in the Input flow. The statement
							is as follows: <code class="code">&#8220;Update download set type_os=? where
							id=?&#8221;</code>.</p></li><li class="listitem"><p> Then select the <span class="bold"><strong>Use
								PreparedStatement</strong></span> check box to display the placeholders&#8217;
							parameter table.</p></li></ul></div><div class="mediaobject"><img src="../images/Use_Case_tSQLiteRow4.png"></div><div class="itemizedlist"><ul class="itemizedlist" type="disc"><li class="listitem"><p> In the Input parameters table, add as many lines as necessary to
							cover all placeholders. In this scenario, <span class="emphasis"><em>type_os</em></span>
							and <span class="emphasis"><em>id</em></span> are to be defined.</p></li><li class="listitem"><p> Set the <span class="bold"><strong>Commit every</strong></span> field.</p></li><li class="listitem"><p> Save the job and press <span class="bold"><strong>F6</strong></span> to run it.
						</p></li></ul></div><p>The <span class="emphasis"><em>download</em></span> table from the SQLite database is thus
					updated with new <span class="emphasis"><em>type_os</em></span> code according to the delimited
					input file.</p></div></div></body></html>