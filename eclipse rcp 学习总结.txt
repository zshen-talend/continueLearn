1.插件的打包发布
	在插件的发布过程中，利用java.lang.reflect可以很好的为插件进行解偶减少插件发布打包的配置工作。

2.在把插件引入原文件后
	很有可能要运行的插件包含了引入的插件工程，所以现象会是不知何处报错。所以见到不明出处的错时要查找Build Path中的Libraries和Projects

3.建立rcp应用的菜单
	新建立的rcp程序是没有工具条和菜单条的，在利用rcp向导生成的rcp程序中的ApplicationActionBarAdvisor的类中，通过makeActions定义实现了IWorkbenchAction接口	的Action。在向菜单条中加入action时先加入了一个MenuManager(它有text和Action两项)然后在这个manager中加入了GroupMarker这样的分组，所以在以前向窗口中加入某个菜单或工具栏项时要先写manager的ID然后"/"写GroupMarker名。
	注意:
		在这里可以看到，整个工作台的menuBar是一个IMenuManager接口下的对象，而在这个菜单条上加入的也是IMenuManager接口实现的对象。然而它们都可以通过add方法来实现组合操作。基于根源可以发现它们都实现了IContributionItem 个接口，而add方法有两种不同参数的实现，其中一个参数就是上面的这个类型的。而另一个参数类型就是IAction类型用来加入底层的action。

4.tabFolder.setSelectionBackground(颜色数组,百分比,boolean)

5.视图中得到toolbarManager
	private void initializeToolBar() 	{ 
	IToolBarManager toolbarManager = getViewSite().getActionBars().getToolBarManager(); 
	} 

6.得到Menu
	private void initializeMenu() { 
	IMenuManager menuManager = getViewSite().getActionBars().getMenuManager(); 
	} 

6.隐藏指定actionSet id的方法来隐藏贡献的菜单条和工具栏
	ActionSetRegistry registry = WorkbenchPlugin.getDefault().getActionSetRegistry();
        IActionSetDescriptor actionSet = registry.findActionSet("rcp.actionSet");
        actionSet.setInitiallyVisible(false);


7.定制RCP中的菜单条
	protected void fillMenuBar(IMenuManager menu) {
        ActionSetRegistry reg = WorkbenchPlugin.getDefault()
                .getActionSetRegistry();

        IActionSetDescriptor[] actionSets = reg.getActionSets();
        String[] removeActionSets = new String[] {
                "org.eclipse.search.searchActionSet",
                "org.eclipse.ui.cheatsheets.actionSet",
                "org.eclipse.ui.actionSet.keyBindings",
                "org.eclipse.ui.edit.text.actionSet.navigation",
                "org.eclipse.ui.edit.text.actionSet.annotationNavigation",
                "org.eclipse.ui.edit.text.actionSet.convertLineDelimitersTo",
                "org.eclipse.ui.edit.text.actionSet.openExternalFile",
                "org.eclipse.ui.externaltools.ExternalToolsSet",
                "org.eclipse.ui.WorkingSetActionSet",
                "org.eclipse.update.ui.softwareUpdates",
                "org.eclipse.ui.edit.text.actionSet.convertLineDelimitersTo",
                "org.eclipse.ui.actionSet.openFiles", };

        for (int i = 0; i < actionSets.length; i++) {
            boolean found = false;
            for (int j = 0; j < removeActionSets.length; j++) {
                if (removeActionSets[j].equals(actionSets.getId()))
                    found = true;
            }

            if (!found)
                continue;
            IExtension ext = actionSets.getConfigurationElement()
                    .getDeclaringExtension();
            reg.removeExtension(ext, new Object[] { actionSets });
        }


7.隐藏暂时不想要的ActionSet
	public void postWindowOpen() {//最好加在创建后postWindowCreate这样不会有闪屏！
        IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        page.hideActionSet("org.eclipse.ui.WorkingSetActionSet");
        page.hideActionSet("org.eclipse.ui.edit.text.actionSet.annotationNavigation");
        page.hideActionSet("org.eclipse.ui.edit.text.actionSet.navigation");
    }

8.视图和编辑器的流水线标题
	PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, true);
	PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS,false);
项目14还有通过配置文件来解决的方法。

9.将透视图窗口放到右边
	IPreferenceStore apiStore = PrefUtil.getAPIPreferenceStore(); 
	apiStore.setValue(IWorkbenchPreferenceConstants.DOCK_PERSPECTIVE_BAR, IWorkbenchPreferenceConstants.TOP_RIGHT); 
项目14还有通过配置文件来解决的方法。

10.RCP的欢迎页面
	不能正常显示欢迎页面的问题可能是:
	layout.setFixed(true);//添加了这样的固定功能就不能再正常打开欢迎页面了！

11.当遇到在控制台launch可以执行，但是在导出之后不能运行的，要看plugin.xml文件中runtime标签和build标签中导出的文件是否有问题。build标签中要看Binary Build小窗口中选择。runtime主要包括导出的包，这里往往涉及到其它插件引用的问题。

12.平台配置管理
如果是一个刚解压缩的 Eclipse 平台，那么当您启动 eclipse.exe 的时候将会发生：

	找到 Java 运行期环境（JRE）。默认情况下，Eclipse 首先查找 exlipse\jre 子目录。如果没有找到，Eclipse 将查找在系统中注册的 Java 运行期环境。 
注意：-vm dir-location 参数可以用到指定其他的 JRE

用链接扩展文件，eclipse会去找eclipse/links目录下的*.link文件，并按照其中的位置path=d:/.....，来找相应的文件，到了这个目录中又会以eclipse\features 目录和 eclipse\plugins 目录，看是否有合法的功能部件和（或）插件

13.关联大纲视图和属性页视图
	大纲视图在打开的时候会检查当前编辑器，是否实现了IAdaptable接口，如果实现了，会到相应的方法中寻找实现了ContentOutlinePage类的视图，这个视图一般会是一个TreeViewer。而所有要添加的改动按照这个视图来进行就可以了。
	属性页视图则与所选中的对象有关，首先要求承载选中对象视图(JFace级)作为一个选择提供者注册到选择服务中去，如:getSite().setSelectionProvider(视图),这样选择服务器才会去通过IAdaptable接口去适配选中对象与属性页视图。那么接下来要求的就是选中对象类必须实现IAdaptable接口了。最后选中的对象类还必须实现IPropertySource接口，通过这个接口中的方法来控制属性页的显示与改变。

14.通过配置文件来修改RCP初始化的一些属性
	请看网页file:///C:/Documents%20and%20Settings/OWNER/My%20Documents/发布您的最新基于Eclipse的产品二(图)-Java频道-中国IT实验室.htm

15.透视图的转换perspective
 IWorkbenchWindow activeWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
            PlatformUI.getWorkbench().showPerspective(perspectiveID, activeWindow);

16.对于未打包成jar文件的plugin的dependebce
	可以使用Dependencies中的Automated Management of Dependencies来引入这个依赖，它可以读取未打包的插件然后点击下面的add dependencies来添加这个插件到Required Plugin-ins的列表中。